/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.domivice.services.userInterface.api.rest;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import org.domivice.services.userInterface.api.rest.models.Error;
import org.domivice.services.userInterface.api.rest.models.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-12-02T14:34:00.627762-05:00[America/Toronto]")
@Validated
@Tag(name = "Documents", description = "The Document endpoints")
public interface ServicesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /services/v1/document-requirements/{documentRequirementId} : Delete Document Requirement
     *
     * @param documentRequirementId The document requirement id (required)
     * @return Response when document requirement is deleted (status code 204)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1DocumentRequirementsDocumentRequirementIdDelete",
            summary = "Delete Document Requirement",
            tags = {"Documents"},
            responses = {
                    @ApiResponse(responseCode = "204", description = "Response when document requirement is deleted"),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/services/v1/document-requirements/{documentRequirementId}",
            produces = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<Void>> servicesV1DocumentRequirementsDocumentRequirementIdDelete(
            @Parameter(name = "documentRequirementId", description = "The document requirement id", required = true, in = ParameterIn.PATH) @PathVariable("documentRequirementId") UUID documentRequirementId
    ) {
        return CompletableFuture.completedFuture(new ResponseEntity<>(HttpStatus.OK));

    }


    /**
     * GET /services/v1/document-requirements/{documentRequirementId} : Get Document Requirement
     *
     * @param documentRequirementId The document requirement id (required)
     * @return Response when the document requirement is returned (status code 200)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1DocumentRequirementsDocumentRequirementIdGet",
            summary = "Get Document Requirement",
            tags = {"Documents"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Response when the document requirement is returned", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = DocumentRequirement.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/services/v1/document-requirements/{documentRequirementId}",
            produces = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<DocumentRequirement>> servicesV1DocumentRequirementsDocumentRequirementIdGet(
            @Parameter(name = "documentRequirementId", description = "The document requirement id", required = true, in = ParameterIn.PATH) @PathVariable("documentRequirementId") UUID documentRequirementId
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"requiringCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"documentTypes\" : [ { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"name\" : \"name\", \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"name\" : \"name\", \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\", \"requiringState\" : { \"code\" : \"code\", \"name\" : \"name\" } }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(200));
        }, Runnable::run);

    }


    /**
     * PATCH /services/v1/document-requirements/{documentRequirementId} : Update Document Requirement
     *
     * @param documentRequirementId    The document requirement id (required)
     * @param documentRequirementPatch (required)
     * @return Response when document requirement has been updated (status code 200)
     * or There was an error with the request (status code 400)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1DocumentRequirementsDocumentRequirementIdPatch",
            summary = "Update Document Requirement",
            tags = {"Documents"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Response when document requirement has been updated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = DocumentRequirement.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "There was an error with the request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.PATCH,
            value = "/services/v1/document-requirements/{documentRequirementId}",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<DocumentRequirement>> servicesV1DocumentRequirementsDocumentRequirementIdPatch(
            @Parameter(name = "documentRequirementId", description = "The document requirement id", required = true, in = ParameterIn.PATH) @PathVariable("documentRequirementId") UUID documentRequirementId,
            @Parameter(name = "DocumentRequirementPatch", description = "", required = true) @Valid @RequestBody DocumentRequirementPatch documentRequirementPatch
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"requiringCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"documentTypes\" : [ { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"name\" : \"name\", \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"name\" : \"name\", \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\", \"requiringState\" : { \"code\" : \"code\", \"name\" : \"name\" } }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(200));
        }, Runnable::run);

    }


    /**
     * GET /services/v1/document-requirements : List Document Requirements
     *
     * @param search      Document requirement search terms (optional)
     * @param countryCode Filter document requirements by country code (optional)
     * @param stateCode   Filter Document requirement by state code (optional)
     * @param statuses    Filter document requirements by statuses e.g A comma separated list of statuses (optional)
     * @return Response when 0 or more document requirements are returned. (status code 200)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     */
    @Operation(
            operationId = "servicesV1DocumentRequirementsGet",
            summary = "List Document Requirements",
            tags = {"Documents"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Response when 0 or more document requirements are returned.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = DocumentRequirementList.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/services/v1/document-requirements",
            produces = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<DocumentRequirementList>> servicesV1DocumentRequirementsGet(
            @Parameter(name = "search", description = "Document requirement search terms", in = ParameterIn.QUERY) @Valid @RequestParam(value = "search", required = false) String search,
            @Parameter(name = "countryCode", description = "Filter document requirements by country code", in = ParameterIn.QUERY) @Valid @RequestParam(value = "countryCode", required = false) String countryCode,
            @Parameter(name = "stateCode", description = "Filter Document requirement by state code", in = ParameterIn.QUERY) @Valid @RequestParam(value = "stateCode", required = false) String stateCode,
            @Parameter(name = "statuses", description = "Filter document requirements by statuses e.g A comma separated list of statuses", in = ParameterIn.QUERY) @Valid @RequestParam(value = "statuses", required = false) String statuses
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"totalItemsCount\" : 6.027456183070403, \"pageCount\" : 0.8008281904610115, \"previousPage\" : \"previousPage\", \"data\" : [ { \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"requiringCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"documentTypes\" : [ { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"name\" : \"name\", \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"name\" : \"name\", \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\", \"requiringState\" : { \"code\" : \"code\", \"name\" : \"name\" } }, { \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"requiringCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"documentTypes\" : [ { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"name\" : \"name\", \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"name\" : \"name\", \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\", \"requiringState\" : { \"code\" : \"code\", \"name\" : \"name\" } } ], \"nextPage\" : \"nextPage\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(200));
        }, Runnable::run);

    }


    /**
     * POST /services/v1/document-requirements : Add Document Requirement
     *
     * @param documentRequirementCreate (required)
     * @return Response when document requirement has been created (status code 201)
     * or There was an error with the request (status code 400)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     */
    @Operation(
            operationId = "servicesV1DocumentRequirementsPost",
            summary = "Add Document Requirement",
            tags = {"Documents"},
            responses = {
                    @ApiResponse(responseCode = "201", description = "Response when document requirement has been created", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = DocumentRequirement.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "There was an error with the request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/services/v1/document-requirements",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<DocumentRequirement>> servicesV1DocumentRequirementsPost(
            @Parameter(name = "DocumentRequirementCreate", description = "", required = true) @Valid @RequestBody DocumentRequirementCreate documentRequirementCreate
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"requiringCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"documentTypes\" : [ { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"name\" : \"name\", \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"name\" : \"name\", \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\", \"requiringState\" : { \"code\" : \"code\", \"name\" : \"name\" } }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(201));
        }, Runnable::run);

    }


    /**
     * DELETE /services/v1/document-types/{documentTypeId} : Delete Document Type
     *
     * @param documentTypeId The document type id (required)
     * @return Response when the document type has been deleted. (status code 204)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1DocumentTypesDocumentTypeIdDelete",
            summary = "Delete Document Type",
            tags = {"Documents"},
            responses = {
                    @ApiResponse(responseCode = "204", description = "Response when the document type has been deleted."),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/services/v1/document-types/{documentTypeId}",
            produces = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<Void>> servicesV1DocumentTypesDocumentTypeIdDelete(
            @Parameter(name = "documentTypeId", description = "The document type id", required = true, in = ParameterIn.PATH) @PathVariable("documentTypeId") UUID documentTypeId
    ) {
        return CompletableFuture.completedFuture(new ResponseEntity<>(HttpStatus.OK));

    }


    /**
     * GET /services/v1/document-types/{documentTypeId} : Get Document Type
     *
     * @param documentTypeId The document type id (required)
     * @return Response when the document type is returned (status code 200)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1DocumentTypesDocumentTypeIdGet",
            summary = "Get Document Type",
            tags = {"Documents"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Response when the document type is returned", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = DocumentType.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/services/v1/document-types/{documentTypeId}",
            produces = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<DocumentType>> servicesV1DocumentTypesDocumentTypeIdGet(
            @Parameter(name = "documentTypeId", description = "The document type id", required = true, in = ParameterIn.PATH) @PathVariable("documentTypeId") UUID documentTypeId
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"name\" : \"name\", \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(200));
        }, Runnable::run);

    }


    /**
     * PATCH /services/v1/document-types/{documentTypeId} : Update Document Type
     *
     * @param documentTypeId    The document type id (required)
     * @param documentTypePatch (required)
     * @return Response when document type has been updated (status code 200)
     * or There was an error with the request (status code 400)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1DocumentTypesDocumentTypeIdPatch",
            summary = "Update Document Type",
            tags = {"Documents"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Response when document type has been updated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = DocumentType.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "There was an error with the request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.PATCH,
            value = "/services/v1/document-types/{documentTypeId}",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<DocumentType>> servicesV1DocumentTypesDocumentTypeIdPatch(
            @Parameter(name = "documentTypeId", description = "The document type id", required = true, in = ParameterIn.PATH) @PathVariable("documentTypeId") UUID documentTypeId,
            @Parameter(name = "DocumentTypePatch", description = "", required = true) @Valid @RequestBody DocumentTypePatch documentTypePatch
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"name\" : \"name\", \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(200));
        }, Runnable::run);

    }


    /**
     * GET /services/v1/document-types : List Document Types
     *
     * @param search      The document type search terms (optional)
     * @param stateCode   Filter the document types by state code (optional)
     * @param countryCode Filter the document type by country code (optional)
     * @return Response when 0 or more document types are returned (status code 200)
     * or User is not authenticated (status code 401)
     */
    @Operation(
            operationId = "servicesV1DocumentTypesGet",
            summary = "List Document Types",
            tags = {"Documents"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Response when 0 or more document types are returned", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = DocumentTypeList.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/services/v1/document-types",
            produces = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<DocumentTypeList>> servicesV1DocumentTypesGet(
            @Parameter(name = "search", description = "The document type search terms", in = ParameterIn.QUERY) @Valid @RequestParam(value = "search", required = false) String search,
            @Parameter(name = "stateCode", description = "Filter the document types by state code", in = ParameterIn.QUERY) @Valid @RequestParam(value = "stateCode", required = false) String stateCode,
            @Parameter(name = "countryCode", description = "Filter the document type by country code", in = ParameterIn.QUERY) @Valid @RequestParam(value = "countryCode", required = false) String countryCode
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"totalItemsCount\" : 6.027456183070403, \"pageCount\" : 0.8008281904610115, \"previousPage\" : \"previousPage\", \"data\" : [ { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"name\" : \"name\", \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"name\" : \"name\", \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"nextPage\" : \"nextPage\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(200));
        }, Runnable::run);

    }


    /**
     * POST /services/v1/document-types : Create Document Type
     *
     * @param documentTypeCreate (required)
     * @return Response when document type is created (status code 201)
     * or There was an error with the request (status code 400)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     */
    @Operation(
            operationId = "servicesV1DocumentTypesPost",
            summary = "Create Document Type",
            tags = {"Documents"},
            responses = {
                    @ApiResponse(responseCode = "201", description = "Response when document type is created", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = DocumentType.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "There was an error with the request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/services/v1/document-types",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<DocumentType>> servicesV1DocumentTypesPost(
            @Parameter(name = "DocumentTypeCreate", description = "", required = true) @Valid @RequestBody DocumentTypeCreate documentTypeCreate
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"name\" : \"name\", \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(201));
        }, Runnable::run);

    }


    /**
     * GET /services/v1/licence-issuers : List Licence Issuers
     *
     * @param search        The search term (optional)
     * @param countryCode   Filter licence issuer by country code (optional)
     * @param stateCode     Filter licence issuers by state code (optional)
     * @param licenceTypeId Filter licence type by licence type (optional)
     * @return Response when 0 or more licence types are returned  (status code 200)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     */
    @Operation(
            operationId = "servicesV1LicenceIssuersGet",
            summary = "List Licence Issuers",
            tags = {"Licences"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Response when 0 or more licence types are returned ", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = LicenceIssuerList.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/services/v1/licence-issuers",
            produces = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<LicenceIssuerList>> servicesV1LicenceIssuersGet(
            @Parameter(name = "search", description = "The search term", in = ParameterIn.QUERY) @Valid @RequestParam(value = "search", required = false) String search,
            @Parameter(name = "countryCode", description = "Filter licence issuer by country code", in = ParameterIn.QUERY) @Valid @RequestParam(value = "countryCode", required = false) String countryCode,
            @Parameter(name = "stateCode", description = "Filter licence issuers by state code", in = ParameterIn.QUERY) @Valid @RequestParam(value = "stateCode", required = false) String stateCode,
            @Parameter(name = "licenceTypeId", description = "Filter licence type by licence type", in = ParameterIn.QUERY) @Valid @RequestParam(value = "licenceTypeId", required = false) String licenceTypeId
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"totalItemsCount\" : 6.027456183070403, \"pageCount\" : 0.8008281904610115, \"previousPage\" : \"previousPage\", \"data\" : [ { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"nextPage\" : \"nextPage\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(200));
        }, Runnable::run);

    }


    /**
     * DELETE /services/v1/licence-issuers/{licenceIssuerId} : Delete Licence Issuer
     *
     * @param licenceIssuerId Licence issuer id (required)
     * @return Response when licence issuer is deleted (status code 204)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1LicenceIssuersLicenceIssuerIdDelete",
            summary = "Delete Licence Issuer",
            tags = {"Licences"},
            responses = {
                    @ApiResponse(responseCode = "204", description = "Response when licence issuer is deleted"),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/services/v1/licence-issuers/{licenceIssuerId}",
            produces = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<Void>> servicesV1LicenceIssuersLicenceIssuerIdDelete(
            @Parameter(name = "licenceIssuerId", description = "Licence issuer id", required = true, in = ParameterIn.PATH) @PathVariable("licenceIssuerId") UUID licenceIssuerId
    ) {
        return CompletableFuture.completedFuture(new ResponseEntity<>(HttpStatus.OK));

    }


    /**
     * GET /services/v1/licence-issuers/{licenceIssuerId} : Get Licence Issuer
     *
     * @param licenceIssuerId Licence issuer id (required)
     * @return Response when licence issuer is returned (status code 200)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1LicenceIssuersLicenceIssuerIdGet",
            summary = "Get Licence Issuer",
            tags = {"Licences"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Response when licence issuer is returned", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = LicenceIssuer.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/services/v1/licence-issuers/{licenceIssuerId}",
            produces = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<LicenceIssuer>> servicesV1LicenceIssuersLicenceIssuerIdGet(
            @Parameter(name = "licenceIssuerId", description = "Licence issuer id", required = true, in = ParameterIn.PATH) @PathVariable("licenceIssuerId") UUID licenceIssuerId
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(200));
        }, Runnable::run);

    }


    /**
     * PATCH /services/v1/licence-issuers/{licenceIssuerId} : Update Licence Issuer
     *
     * @param licenceIssuerId    Licence issuer id (required)
     * @param licenceIssuerPatch (required)
     * @return Response when the licence issuer is updated (status code 200)
     * or There was an error with the request (status code 400)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1LicenceIssuersLicenceIssuerIdPatch",
            summary = "Update Licence Issuer",
            tags = {"Licences"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Response when the licence issuer is updated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = LicenceIssuer.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "There was an error with the request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.PATCH,
            value = "/services/v1/licence-issuers/{licenceIssuerId}",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<LicenceIssuer>> servicesV1LicenceIssuersLicenceIssuerIdPatch(
            @Parameter(name = "licenceIssuerId", description = "Licence issuer id", required = true, in = ParameterIn.PATH) @PathVariable("licenceIssuerId") UUID licenceIssuerId,
            @Parameter(name = "LicenceIssuerPatch", description = "", required = true) @Valid @RequestBody LicenceIssuerPatch licenceIssuerPatch
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(200));
        }, Runnable::run);

    }


    /**
     * POST /services/v1/licence-issuers : Add Licence Type Issuer
     *
     * @param licenceIssuerCreate (required)
     * @return Response when licence type is created (status code 201)
     * or There was an error with the request (status code 400)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     */
    @Operation(
            operationId = "servicesV1LicenceIssuersPost",
            summary = "Add Licence Type Issuer",
            tags = {"Licences"},
            responses = {
                    @ApiResponse(responseCode = "201", description = "Response when licence type is created", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = LicenceIssuer.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "There was an error with the request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/services/v1/licence-issuers",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<LicenceIssuer>> servicesV1LicenceIssuersPost(
            @Parameter(name = "LicenceIssuerCreate", description = "", required = true) @Valid @RequestBody LicenceIssuerCreate licenceIssuerCreate
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(201));
        }, Runnable::run);

    }


    /**
     * GET /services/v1/licence-types : List Licence Types
     *
     * @param search The licence type search term (optional)
     * @return Response when 0 or more licence types are returned (status code 200)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     */
    @Operation(
            operationId = "servicesV1LicenceTypesGet",
            summary = "List Licence Types",
            tags = {"Licences"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Response when 0 or more licence types are returned", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = LicenceTypeList.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/services/v1/licence-types",
            produces = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<LicenceTypeList>> servicesV1LicenceTypesGet(
            @Parameter(name = "search", description = "The licence type search term", in = ParameterIn.QUERY) @Valid @RequestParam(value = "search", required = false) String search
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"totalItemsCount\" : 6.027456183070403, \"pageCount\" : 0.8008281904610115, \"previousPage\" : \"previousPage\", \"data\" : [ { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"nextPage\" : \"nextPage\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(200));
        }, Runnable::run);

    }


    /**
     * DELETE /services/v1/licence-types/{licenceTypeId} : Delete Licence Type
     *
     * @param licenceTypeId Licence Type id (required)
     * @return Response when the licence type is deleted (status code 204)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1LicenceTypesLicenceTypeIdDelete",
            summary = "Delete Licence Type",
            tags = {"Licences"},
            responses = {
                    @ApiResponse(responseCode = "204", description = "Response when the licence type is deleted"),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/services/v1/licence-types/{licenceTypeId}",
            produces = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<Void>> servicesV1LicenceTypesLicenceTypeIdDelete(
            @Parameter(name = "licenceTypeId", description = "Licence Type id", required = true, in = ParameterIn.PATH) @PathVariable("licenceTypeId") UUID licenceTypeId
    ) {
        return CompletableFuture.completedFuture(new ResponseEntity<>(HttpStatus.OK));

    }


    /**
     * GET /services/v1/licence-types/{licenceTypeId} : Get Licence Type
     *
     * @param licenceTypeId Licence Type id (required)
     * @return Response when licence type is returned (status code 200)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1LicenceTypesLicenceTypeIdGet",
            summary = "Get Licence Type",
            tags = {"Licences"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Response when licence type is returned", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = LicenceType.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/services/v1/licence-types/{licenceTypeId}",
            produces = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<LicenceType>> servicesV1LicenceTypesLicenceTypeIdGet(
            @Parameter(name = "licenceTypeId", description = "Licence Type id", required = true, in = ParameterIn.PATH) @PathVariable("licenceTypeId") UUID licenceTypeId
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(200));
        }, Runnable::run);

    }


    /**
     * PATCH /services/v1/licence-types/{licenceTypeId} : Update Licence Type
     *
     * @param licenceTypeId    Licence Type id (required)
     * @param licenceTypePatch (required)
     * @return Response when licence type is updated (status code 200)
     * or There was an error with the request (status code 400)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1LicenceTypesLicenceTypeIdPatch",
            summary = "Update Licence Type",
            tags = {"Licences"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Response when licence type is updated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = LicenceType.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "There was an error with the request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.PATCH,
            value = "/services/v1/licence-types/{licenceTypeId}",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<LicenceType>> servicesV1LicenceTypesLicenceTypeIdPatch(
            @Parameter(name = "licenceTypeId", description = "Licence Type id", required = true, in = ParameterIn.PATH) @PathVariable("licenceTypeId") UUID licenceTypeId,
            @Parameter(name = "LicenceTypePatch", description = "", required = true) @Valid @RequestBody LicenceTypePatch licenceTypePatch
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(200));
        }, Runnable::run);

    }


    /**
     * POST /services/v1/licence-types : Add Licence Type
     *
     * @param licenceTypeCreate (required)
     * @return Response when licence type is created (status code 201)
     * or There was an error with the request (status code 400)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     */
    @Operation(
            operationId = "servicesV1LicenceTypesPost",
            summary = "Add Licence Type",
            tags = {"Licences"},
            responses = {
                    @ApiResponse(responseCode = "201", description = "Response when licence type is created", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = LicenceType.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "There was an error with the request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/services/v1/licence-types",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<LicenceType>> servicesV1LicenceTypesPost(
            @Parameter(name = "LicenceTypeCreate", description = "", required = true) @Valid @RequestBody LicenceTypeCreate licenceTypeCreate
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(201));
        }, Runnable::run);

    }


    /**
     * GET /services/v1/service-categories : List Services Categories
     *
     * @param search   The search terms (optional)
     * @param parentId The service category parent id (optional)
     * @param slug     The service category slug (optional)
     * @return A result set of zero or more services was returned (status code 200)
     */
    @Operation(
            operationId = "servicesV1ServiceCategoriesGet",
            summary = "List Services Categories",
            tags = {"Service Categories"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "A result set of zero or more services was returned", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ServiceCategoryList.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/services/v1/service-categories",
            produces = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<ServiceCategoryList>> servicesV1ServiceCategoriesGet(
            @Parameter(name = "search", description = "The search terms", in = ParameterIn.QUERY) @Valid @RequestParam(value = "search", required = false) String search,
            @Parameter(name = "parentId", description = "The service category parent id", in = ParameterIn.QUERY) @Valid @RequestParam(value = "parentId", required = false) UUID parentId,
            @Parameter(name = "slug", description = "The service category slug", in = ParameterIn.QUERY) @Valid @RequestParam(value = "slug", required = false) String slug
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"totalItemsCount\" : 6, \"pageCount\" : 0, \"previousPage\" : \"previousPage\", \"data\" : [ { \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"parentId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"slug\" : \"slug\" }, { \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"parentId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"slug\" : \"slug\" } ], \"nextPage\" : \"nextPage\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(200));
        }, Runnable::run);

    }


    /**
     * POST /services/v1/service-categories : Add Service Category
     *
     * @param serviceCategoryCreate (required)
     * @return The service category was successfully created (status code 201)
     * or There was an error with the request (status code 400)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     */
    @Operation(
            operationId = "servicesV1ServiceCategoriesPost",
            summary = "Add Service Category",
            tags = {"Service Categories"},
            responses = {
                    @ApiResponse(responseCode = "201", description = "The service category was successfully created", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ServiceCategory.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "There was an error with the request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/services/v1/service-categories",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<ServiceCategory>> servicesV1ServiceCategoriesPost(
            @Parameter(name = "ServiceCategoryCreate", description = "", required = true) @Valid @RequestBody ServiceCategoryCreate serviceCategoryCreate
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"parentId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"slug\" : \"slug\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(201));
        }, Runnable::run);

    }


    /**
     * DELETE /services/v1/service-categories/{serviceCategoryId}/amenities/{amenityId} : Delete Amenity
     *
     * @param serviceCategoryId The service category id (required)
     * @param amenityId         The amenity id (required)
     * @return Response when amenity has been deleted (status code 204)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1ServiceCategoriesServiceCategoryIdAmenitiesAmenityIdDelete",
            summary = "Delete Amenity",
            tags = {"Service Categories"},
            responses = {
                    @ApiResponse(responseCode = "204", description = "Response when amenity has been deleted"),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/services/v1/service-categories/{serviceCategoryId}/amenities/{amenityId}",
            produces = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<Void>> servicesV1ServiceCategoriesServiceCategoryIdAmenitiesAmenityIdDelete(
            @Parameter(name = "serviceCategoryId", description = "The service category id", required = true, in = ParameterIn.PATH) @PathVariable("serviceCategoryId") UUID serviceCategoryId,
            @Parameter(name = "amenityId", description = "The amenity id", required = true, in = ParameterIn.PATH) @PathVariable("amenityId") UUID amenityId
    ) {
        return CompletableFuture.completedFuture(new ResponseEntity<>(HttpStatus.OK));

    }


    /**
     * PATCH /services/v1/service-categories/{serviceCategoryId}/amenities/{amenityId} : Update Amenity
     *
     * @param serviceCategoryId The service category id (required)
     * @param amenityId         The amenity id (required)
     * @param amenityPatch      (required)
     * @return Response when the amenity has been updated (status code 200)
     * or There was an error with the request (status code 400)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1ServiceCategoriesServiceCategoryIdAmenitiesAmenityIdPatch",
            summary = "Update Amenity",
            tags = {"Service Categories"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Response when the amenity has been updated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Amenity.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "There was an error with the request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.PATCH,
            value = "/services/v1/service-categories/{serviceCategoryId}/amenities/{amenityId}",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<Amenity>> servicesV1ServiceCategoriesServiceCategoryIdAmenitiesAmenityIdPatch(
            @Parameter(name = "serviceCategoryId", description = "The service category id", required = true, in = ParameterIn.PATH) @PathVariable("serviceCategoryId") UUID serviceCategoryId,
            @Parameter(name = "amenityId", description = "The amenity id", required = true, in = ParameterIn.PATH) @PathVariable("amenityId") UUID amenityId,
            @Parameter(name = "AmenityPatch", description = "", required = true) @Valid @RequestBody AmenityPatch amenityPatch
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"name\" : \"name\", \"icon\" : \"icon\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceCategoryId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(200));
        }, Runnable::run);

    }


    /**
     * POST /services/v1/service-categories/{serviceCategoryId}/amenities : Add amenities
     *
     * @param serviceCategoryId The service category id (required)
     * @param amenityCreate     (required)
     * @return Response when amenity has been created (status code 201)
     * or There was an error with the request (status code 400)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1ServiceCategoriesServiceCategoryIdAmenitiesPost",
            summary = "Add amenities",
            tags = {"Service Categories"},
            responses = {
                    @ApiResponse(responseCode = "201", description = "Response when amenity has been created", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Amenity.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "There was an error with the request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/services/v1/service-categories/{serviceCategoryId}/amenities",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<Amenity>> servicesV1ServiceCategoriesServiceCategoryIdAmenitiesPost(
            @Parameter(name = "serviceCategoryId", description = "The service category id", required = true, in = ParameterIn.PATH) @PathVariable("serviceCategoryId") UUID serviceCategoryId,
            @Parameter(name = "AmenityCreate", description = "", required = true) @Valid @RequestBody AmenityCreate amenityCreate
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"name\" : \"name\", \"icon\" : \"icon\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceCategoryId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(201));
        }, Runnable::run);

    }


    /**
     * POST /services/v1/service-categories/{serviceCategoryId}/avatar-upload : Upload Service Category Avatar
     *
     * @param serviceCategoryId (required)
     * @param file              (optional)
     * @return The category image has been uploaded (status code 204)
     * or There was an error with the request (status code 400)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     */
    @Operation(
            operationId = "servicesV1ServiceCategoriesServiceCategoryIdAvatarUploadPost",
            summary = "Upload Service Category Avatar",
            tags = {"Service Categories"},
            responses = {
                    @ApiResponse(responseCode = "204", description = "The category image has been uploaded", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Media.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "There was an error with the request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/services/v1/service-categories/{serviceCategoryId}/avatar-upload",
            produces = {"application/json"},
            consumes = {"multipart/form-data"}
    )
    default CompletableFuture<ResponseEntity<Media>> servicesV1ServiceCategoriesServiceCategoryIdAvatarUploadPost(
            @Parameter(name = "serviceCategoryId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("serviceCategoryId") UUID serviceCategoryId,
            @Parameter(name = "file", description = "") @RequestPart(value = "file", required = false) MultipartFile file
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(204));
        }, Runnable::run);

    }


    /**
     * DELETE /services/v1/service-categories/{serviceCategoryId} : Delete Service Category
     *
     * @param serviceCategoryId The service category Id (required)
     * @return The service category was deleted (status code 204)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1ServiceCategoriesServiceCategoryIdDelete",
            summary = "Delete Service Category",
            tags = {"Service Categories"},
            responses = {
                    @ApiResponse(responseCode = "204", description = "The service category was deleted"),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/services/v1/service-categories/{serviceCategoryId}",
            produces = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<Void>> servicesV1ServiceCategoriesServiceCategoryIdDelete(
            @Parameter(name = "serviceCategoryId", description = "The service category Id", required = true, in = ParameterIn.PATH) @PathVariable("serviceCategoryId") UUID serviceCategoryId
    ) {
        return CompletableFuture.completedFuture(new ResponseEntity<>(HttpStatus.OK));

    }


    /**
     * GET /services/v1/service-categories/{serviceCategoryId} : Get Service Category
     *
     * @param serviceCategoryId The service category Id (required)
     * @return The service category was returned (status code 200)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1ServiceCategoriesServiceCategoryIdGet",
            summary = "Get Service Category",
            tags = {"Service Categories"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "The service category was returned", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ServiceCategory.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/services/v1/service-categories/{serviceCategoryId}",
            produces = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<ServiceCategory>> servicesV1ServiceCategoriesServiceCategoryIdGet(
            @Parameter(name = "serviceCategoryId", description = "The service category Id", required = true, in = ParameterIn.PATH) @PathVariable("serviceCategoryId") UUID serviceCategoryId
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"parentId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"slug\" : \"slug\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(200));
        }, Runnable::run);

    }


    /**
     * GET /services/v1/service-categories/{serviceCategoryId}/licence-requirements : List Licence Requirements
     *
     * @param serviceCategoryId The service category id (required)
     * @param countryCode       Filter licence requirement by country code (optional)
     * @param stateCode         Filter licence requirements by state code (optional)
     * @return Response when 0 or more licence requirements are returned (status code 200)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     */
    @Operation(
            operationId = "servicesV1ServiceCategoriesServiceCategoryIdLicenceRequirementsGet",
            summary = "List Licence Requirements",
            tags = {"Service Categories"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Response when 0 or more licence requirements are returned", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = LicenceRequirementList.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/services/v1/service-categories/{serviceCategoryId}/licence-requirements",
            produces = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<LicenceRequirementList>> servicesV1ServiceCategoriesServiceCategoryIdLicenceRequirementsGet(
            @Parameter(name = "serviceCategoryId", description = "The service category id", required = true, in = ParameterIn.PATH) @PathVariable("serviceCategoryId") UUID serviceCategoryId,
            @Parameter(name = "countryCode", description = "Filter licence requirement by country code", in = ParameterIn.QUERY) @Valid @RequestParam(value = "countryCode", required = false) String countryCode,
            @Parameter(name = "stateCode", description = "Filter licence requirements by state code", in = ParameterIn.QUERY) @Valid @RequestParam(value = "stateCode", required = false) String stateCode
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"totalItemsCount\" : 6.027456183070403, \"pageCount\" : 0.8008281904610115, \"previousPage\" : \"previousPage\", \"data\" : [ { \"country\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"state\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"licenceIssuers\" : [ { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"serviceCategory\" : { \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"parentId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"slug\" : \"slug\" }, \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"country\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"state\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"licenceIssuers\" : [ { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"serviceCategory\" : { \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"parentId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"slug\" : \"slug\" }, \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"nextPage\" : \"nextPage\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(200));
        }, Runnable::run);

    }


    /**
     * DELETE /services/v1/service-categories/{serviceCategoryId}/licence-requirements/{licenceRequirementId} : Delete Licence Requirement
     *
     * @param serviceCategoryId    The service category id (required)
     * @param licenceRequirementId The licence requirement id (required)
     * @return Response when a licence requirement has been deleted (status code 204)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1ServiceCategoriesServiceCategoryIdLicenceRequirementsLicenceRequirementIdDelete",
            summary = "Delete Licence Requirement",
            tags = {"Service Categories"},
            responses = {
                    @ApiResponse(responseCode = "204", description = "Response when a licence requirement has been deleted"),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/services/v1/service-categories/{serviceCategoryId}/licence-requirements/{licenceRequirementId}",
            produces = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<Void>> servicesV1ServiceCategoriesServiceCategoryIdLicenceRequirementsLicenceRequirementIdDelete(
            @Parameter(name = "serviceCategoryId", description = "The service category id", required = true, in = ParameterIn.PATH) @PathVariable("serviceCategoryId") UUID serviceCategoryId,
            @Parameter(name = "licenceRequirementId", description = "The licence requirement id", required = true, in = ParameterIn.PATH) @PathVariable("licenceRequirementId") UUID licenceRequirementId
    ) {
        return CompletableFuture.completedFuture(new ResponseEntity<>(HttpStatus.OK));

    }


    /**
     * GET /services/v1/service-categories/{serviceCategoryId}/licence-requirements/{licenceRequirementId} : Get Licence Requirement
     *
     * @param serviceCategoryId    The service category id (required)
     * @param licenceRequirementId The licence requirement id (required)
     * @return Response when the licence requirement is returned (status code 200)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1ServiceCategoriesServiceCategoryIdLicenceRequirementsLicenceRequirementIdGet",
            summary = "Get Licence Requirement",
            tags = {"Service Categories"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Response when the licence requirement is returned", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = LicenceRequirement.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/services/v1/service-categories/{serviceCategoryId}/licence-requirements/{licenceRequirementId}",
            produces = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<LicenceRequirement>> servicesV1ServiceCategoriesServiceCategoryIdLicenceRequirementsLicenceRequirementIdGet(
            @Parameter(name = "serviceCategoryId", description = "The service category id", required = true, in = ParameterIn.PATH) @PathVariable("serviceCategoryId") UUID serviceCategoryId,
            @Parameter(name = "licenceRequirementId", description = "The licence requirement id", required = true, in = ParameterIn.PATH) @PathVariable("licenceRequirementId") UUID licenceRequirementId
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"country\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"state\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"licenceIssuers\" : [ { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"serviceCategory\" : { \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"parentId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"slug\" : \"slug\" }, \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(200));
        }, Runnable::run);

    }


    /**
     * PATCH /services/v1/service-categories/{serviceCategoryId}/licence-requirements/{licenceRequirementId} : Update Licence Requirement
     *
     * @param serviceCategoryId       The service category id (required)
     * @param licenceRequirementId    The licence requirement id (required)
     * @param licenceRequirementPatch (required)
     * @return Response when the licence requirement has been updated (status code 200)
     * or There was an error with the request (status code 400)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1ServiceCategoriesServiceCategoryIdLicenceRequirementsLicenceRequirementIdPatch",
            summary = "Update Licence Requirement",
            tags = {"Service Categories"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Response when the licence requirement has been updated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = LicenceRequirement.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "There was an error with the request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.PATCH,
            value = "/services/v1/service-categories/{serviceCategoryId}/licence-requirements/{licenceRequirementId}",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<LicenceRequirement>> servicesV1ServiceCategoriesServiceCategoryIdLicenceRequirementsLicenceRequirementIdPatch(
            @Parameter(name = "serviceCategoryId", description = "The service category id", required = true, in = ParameterIn.PATH) @PathVariable("serviceCategoryId") UUID serviceCategoryId,
            @Parameter(name = "licenceRequirementId", description = "The licence requirement id", required = true, in = ParameterIn.PATH) @PathVariable("licenceRequirementId") UUID licenceRequirementId,
            @Parameter(name = "LicenceRequirementPatch", description = "", required = true) @Valid @RequestBody LicenceRequirementPatch licenceRequirementPatch
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"country\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"state\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"licenceIssuers\" : [ { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"serviceCategory\" : { \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"parentId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"slug\" : \"slug\" }, \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(200));
        }, Runnable::run);

    }


    /**
     * POST /services/v1/service-categories/{serviceCategoryId}/licence-requirements : Add Licence Requirement
     *
     * @param serviceCategoryId        The service category id (required)
     * @param licenceRequirementCreate (required)
     * @return Response when a licence requirement has been created (status code 201)
     * or There was an error with the request (status code 400)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1ServiceCategoriesServiceCategoryIdLicenceRequirementsPost",
            summary = "Add Licence Requirement",
            tags = {"Service Categories"},
            responses = {
                    @ApiResponse(responseCode = "201", description = "Response when a licence requirement has been created", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = LicenceRequirement.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "There was an error with the request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/services/v1/service-categories/{serviceCategoryId}/licence-requirements",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<LicenceRequirement>> servicesV1ServiceCategoriesServiceCategoryIdLicenceRequirementsPost(
            @Parameter(name = "serviceCategoryId", description = "The service category id", required = true, in = ParameterIn.PATH) @PathVariable("serviceCategoryId") UUID serviceCategoryId,
            @Parameter(name = "LicenceRequirementCreate", description = "", required = true) @Valid @RequestBody LicenceRequirementCreate licenceRequirementCreate
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"country\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"state\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"licenceIssuers\" : [ { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"serviceCategory\" : { \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"parentId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"slug\" : \"slug\" }, \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(201));
        }, Runnable::run);

    }


    /**
     * PATCH /services/v1/service-categories/{serviceCategoryId} : Update Service Category
     *
     * @param serviceCategoryId    The service category Id (required)
     * @param serviceCategoryPatch (required)
     * @return The service category was updated (status code 200)
     * or There was an error with the request (status code 400)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1ServiceCategoriesServiceCategoryIdPatch",
            summary = "Update Service Category",
            tags = {"Service Categories"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "The service category was updated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ServiceCategory.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "There was an error with the request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.PATCH,
            value = "/services/v1/service-categories/{serviceCategoryId}",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<ServiceCategory>> servicesV1ServiceCategoriesServiceCategoryIdPatch(
            @Parameter(name = "serviceCategoryId", description = "The service category Id", required = true, in = ParameterIn.PATH) @PathVariable("serviceCategoryId") UUID serviceCategoryId,
            @Parameter(name = "ServiceCategoryPatch", description = "", required = true) @Valid @RequestBody ServiceCategoryPatch serviceCategoryPatch
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"parentId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"slug\" : \"slug\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(200));
        }, Runnable::run);

    }


    /**
     * GET /services/v1/service-providers : List Service Providers
     *
     * @param slug     The service provider slug (optional)
     * @param statuses A comma seperated list of statuses to filter the service list (optional)
     * @param city     Filter service providers by city code (optional)
     * @param state    Filter service providers by state code (optional)
     * @param country  Filter service providers by country code (optional)
     * @param search   Search the service providers by search term (optional)
     * @param geohash  Filter the service providers by geohash (optional)
     * @return Response when 0 or more service providers are added (status code 200)
     */
    @Operation(
            operationId = "servicesV1ServiceProvidersGet",
            summary = "List Service Providers",
            tags = {"Service Providers"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Response when 0 or more service providers are added", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ServiceProviderList.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/services/v1/service-providers",
            produces = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<ServiceProviderList>> servicesV1ServiceProvidersGet(
            @Parameter(name = "slug", description = "The service provider slug", in = ParameterIn.QUERY) @Valid @RequestParam(value = "slug", required = false) String slug,
            @Parameter(name = "statuses", description = "A comma seperated list of statuses to filter the service list", in = ParameterIn.QUERY) @Valid @RequestParam(value = "statuses", required = false) String statuses,
            @Parameter(name = "city", description = "Filter service providers by city code", in = ParameterIn.QUERY) @Valid @RequestParam(value = "city", required = false) String city,
            @Parameter(name = "state", description = "Filter service providers by state code", in = ParameterIn.QUERY) @Valid @RequestParam(value = "state", required = false) String state,
            @Parameter(name = "country", description = "Filter service providers by country code", in = ParameterIn.QUERY) @Valid @RequestParam(value = "country", required = false) String country,
            @Parameter(name = "search", description = "Search the service providers by search term", in = ParameterIn.QUERY) @Valid @RequestParam(value = "search", required = false) String search,
            @Parameter(name = "geohash", description = "Filter the service providers by geohash", in = ParameterIn.QUERY) @Valid @RequestParam(value = "geohash", required = false) String geohash
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"totalItemsCount\" : 5.962133916683182, \"pageCount\" : 1.4658129805029452, \"previousPage\" : \"previousPage\", \"data\" : [ { \"lastName\" : \"lastName\", \"country\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"city\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"rating\" : 6.0274563, \"bio\" : \"bio\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"badge\" : \"badge\", \"firstName\" : \"firstName\", \"reviewCount\" : 0.8008281904610115, \"geohash\" : \"geohash\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"state\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"slug\" : \"slug\", \"status\" : \"active\" }, { \"lastName\" : \"lastName\", \"country\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"city\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"rating\" : 6.0274563, \"bio\" : \"bio\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"badge\" : \"badge\", \"firstName\" : \"firstName\", \"reviewCount\" : 0.8008281904610115, \"geohash\" : \"geohash\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"state\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"slug\" : \"slug\", \"status\" : \"active\" } ], \"nextPage\" : \"nextPage\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(200));
        }, Runnable::run);

    }


    /**
     * DELETE /services/v1/service-providers/{serviceProviderId}/blocked-dates/{blockedDateId} : Delete Blocked Date
     *
     * @param serviceProviderId The service provider id (required)
     * @param blockedDateId     The blocked date id (required)
     * @return The response when the blocked date has been created (status code 204)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     */
    @Operation(
            operationId = "servicesV1ServiceProvidersServiceProviderIdBlockedDatesBlockedDateIdDelete",
            summary = "Delete Blocked Date",
            tags = {"Service Providers"},
            responses = {
                    @ApiResponse(responseCode = "204", description = "The response when the blocked date has been created"),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/services/v1/service-providers/{serviceProviderId}/blocked-dates/{blockedDateId}",
            produces = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<Void>> servicesV1ServiceProvidersServiceProviderIdBlockedDatesBlockedDateIdDelete(
            @Parameter(name = "serviceProviderId", description = "The service provider id", required = true, in = ParameterIn.PATH) @PathVariable("serviceProviderId") UUID serviceProviderId,
            @Parameter(name = "blockedDateId", description = "The blocked date id", required = true, in = ParameterIn.PATH) @PathVariable("blockedDateId") UUID blockedDateId
    ) {
        return CompletableFuture.completedFuture(new ResponseEntity<>(HttpStatus.OK));

    }


    /**
     * PATCH /services/v1/service-providers/{serviceProviderId}/blocked-dates/{blockedDateId} : Update Blocked Date
     *
     * @param serviceProviderId The service provider id (required)
     * @param blockedDateId     The blocked date id (required)
     * @param blockedDatePatch  (optional)
     * @return Response when blocked date has been patched (status code 200)
     * or There was an error with the request (status code 400)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     */
    @Operation(
            operationId = "servicesV1ServiceProvidersServiceProviderIdBlockedDatesBlockedDateIdPatch",
            summary = "Update Blocked Date",
            tags = {"Service Providers"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Response when blocked date has been patched", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = BlockedDate.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "There was an error with the request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.PATCH,
            value = "/services/v1/service-providers/{serviceProviderId}/blocked-dates/{blockedDateId}",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<BlockedDate>> servicesV1ServiceProvidersServiceProviderIdBlockedDatesBlockedDateIdPatch(
            @Parameter(name = "serviceProviderId", description = "The service provider id", required = true, in = ParameterIn.PATH) @PathVariable("serviceProviderId") UUID serviceProviderId,
            @Parameter(name = "blockedDateId", description = "The blocked date id", required = true, in = ParameterIn.PATH) @PathVariable("blockedDateId") UUID blockedDateId,
            @Parameter(name = "BlockedDatePatch", description = "") @Valid @RequestBody(required = false) BlockedDatePatch blockedDatePatch
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"services\" : [ \"services\", \"services\" ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(200));
        }, Runnable::run);

    }


    /**
     * POST /services/v1/service-providers/{serviceProviderId}/blocked-dates : Add Blocked Dates
     *
     * @param serviceProviderId Service provider id (required)
     * @param blockedDateCreate (required)
     * @return Response when blocked date has been created (status code 201)
     * or There was an error with the request (status code 400)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1ServiceProvidersServiceProviderIdBlockedDatesPost",
            summary = "Add Blocked Dates",
            tags = {"Service Providers"},
            responses = {
                    @ApiResponse(responseCode = "201", description = "Response when blocked date has been created", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = BlockedDate.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "There was an error with the request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/services/v1/service-providers/{serviceProviderId}/blocked-dates",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<BlockedDate>> servicesV1ServiceProvidersServiceProviderIdBlockedDatesPost(
            @Parameter(name = "serviceProviderId", description = "Service provider id", required = true, in = ParameterIn.PATH) @PathVariable("serviceProviderId") UUID serviceProviderId,
            @Parameter(name = "BlockedDateCreate", description = "", required = true) @Valid @RequestBody BlockedDateCreate blockedDateCreate
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"services\" : [ \"services\", \"services\" ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(201));
        }, Runnable::run);

    }


    /**
     * POST /services/v1/service-providers/{serviceProviderId}/certifications/{certificationId}/certification-upload : Upload Certification
     *
     * @param serviceProviderId The service provider id (required)
     * @param certificationId   The certification id (required)
     * @param file              (optional)
     * @return Response when certification was uploaded  (status code 200)
     * or There was an error with the request (status code 400)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1ServiceProvidersServiceProviderIdCertificationsCertificationIdCertificationUploadPost",
            summary = "Upload Certification",
            tags = {"Service Providers"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Response when certification was uploaded ", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Media.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "There was an error with the request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/services/v1/service-providers/{serviceProviderId}/certifications/{certificationId}/certification-upload",
            produces = {"application/json"},
            consumes = {"multipart/form-data"}
    )
    default CompletableFuture<ResponseEntity<Media>> servicesV1ServiceProvidersServiceProviderIdCertificationsCertificationIdCertificationUploadPost(
            @Parameter(name = "serviceProviderId", description = "The service provider id", required = true, in = ParameterIn.PATH) @PathVariable("serviceProviderId") UUID serviceProviderId,
            @Parameter(name = "certificationId", description = "The certification id", required = true, in = ParameterIn.PATH) @PathVariable("certificationId") UUID certificationId,
            @Parameter(name = "file", description = "") @RequestPart(value = "file", required = false) MultipartFile file
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(200));
        }, Runnable::run);

    }


    /**
     * DELETE /services/v1/service-providers/{serviceProviderId}/certifications/{certificationId} : Remove Certification
     *
     * @param serviceProviderId The service provider id (required)
     * @param certificationId   The certification id (required)
     * @return Response when certification has been deleted (status code 204)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1ServiceProvidersServiceProviderIdCertificationsCertificationIdDelete",
            summary = "Remove Certification",
            tags = {"Service Providers"},
            responses = {
                    @ApiResponse(responseCode = "204", description = "Response when certification has been deleted"),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/services/v1/service-providers/{serviceProviderId}/certifications/{certificationId}",
            produces = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<Void>> servicesV1ServiceProvidersServiceProviderIdCertificationsCertificationIdDelete(
            @Parameter(name = "serviceProviderId", description = "The service provider id", required = true, in = ParameterIn.PATH) @PathVariable("serviceProviderId") UUID serviceProviderId,
            @Parameter(name = "certificationId", description = "The certification id", required = true, in = ParameterIn.PATH) @PathVariable("certificationId") UUID certificationId
    ) {
        return CompletableFuture.completedFuture(new ResponseEntity<>(HttpStatus.OK));

    }


    /**
     * GET /services/v1/service-providers/{serviceProviderId}/certifications/{certificationId} : Get Certification
     *
     * @param serviceProviderId The service provider id (required)
     * @param certificationId   The certification id (required)
     * @return Response when certification is returned (status code 200)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1ServiceProvidersServiceProviderIdCertificationsCertificationIdGet",
            summary = "Get Certification",
            tags = {"Service Providers"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Response when certification is returned", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Certification.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/services/v1/service-providers/{serviceProviderId}/certifications/{certificationId}",
            produces = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<Certification>> servicesV1ServiceProvidersServiceProviderIdCertificationsCertificationIdGet(
            @Parameter(name = "serviceProviderId", description = "The service provider id", required = true, in = ParameterIn.PATH) @PathVariable("serviceProviderId") UUID serviceProviderId,
            @Parameter(name = "certificationId", description = "The certification id", required = true, in = ParameterIn.PATH) @PathVariable("certificationId") UUID certificationId
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"certificateHolder\" : \"certificateHolder\", \"dateIssued\" : \"2000-01-23\", \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceCategoryIds\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"document\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"issuer\" : \"issuer\", \"certificateTitle\" : \"certificateTitle\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(200));
        }, Runnable::run);

    }


    /**
     * PATCH /services/v1/service-providers/{serviceProviderId}/certifications/{certificationId} : Update Certification
     *
     * @param serviceProviderId  The service provider id (required)
     * @param certificationId    The certification id (required)
     * @param certificationPatch (required)
     * @return Response when certification has been updated (status code 200)
     * or There was an error with the request (status code 400)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1ServiceProvidersServiceProviderIdCertificationsCertificationIdPatch",
            summary = "Update Certification",
            tags = {"Service Providers"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Response when certification has been updated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Certification.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "There was an error with the request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.PATCH,
            value = "/services/v1/service-providers/{serviceProviderId}/certifications/{certificationId}",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<Certification>> servicesV1ServiceProvidersServiceProviderIdCertificationsCertificationIdPatch(
            @Parameter(name = "serviceProviderId", description = "The service provider id", required = true, in = ParameterIn.PATH) @PathVariable("serviceProviderId") UUID serviceProviderId,
            @Parameter(name = "certificationId", description = "The certification id", required = true, in = ParameterIn.PATH) @PathVariable("certificationId") UUID certificationId,
            @Parameter(name = "CertificationPatch", description = "", required = true) @Valid @RequestBody CertificationPatch certificationPatch
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"certificateHolder\" : \"certificateHolder\", \"dateIssued\" : \"2000-01-23\", \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceCategoryIds\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"document\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"issuer\" : \"issuer\", \"certificateTitle\" : \"certificateTitle\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(200));
        }, Runnable::run);

    }


    /**
     * POST /services/v1/service-providers/{serviceProviderId}/certifications : Add Certification
     *
     * @param serviceProviderId   The service provider id (required)
     * @param certificationCreate (required)
     * @return Response when certification has been added (status code 201)
     * or There was an error with the request (status code 400)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     */
    @Operation(
            operationId = "servicesV1ServiceProvidersServiceProviderIdCertificationsPost",
            summary = "Add Certification",
            tags = {"Service Providers"},
            responses = {
                    @ApiResponse(responseCode = "201", description = "Response when certification has been added", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Certification.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "There was an error with the request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/services/v1/service-providers/{serviceProviderId}/certifications",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<Certification>> servicesV1ServiceProvidersServiceProviderIdCertificationsPost(
            @Parameter(name = "serviceProviderId", description = "The service provider id", required = true, in = ParameterIn.PATH) @PathVariable("serviceProviderId") UUID serviceProviderId,
            @Parameter(name = "CertificationCreate", description = "", required = true) @Valid @RequestBody CertificationCreate certificationCreate
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"certificateHolder\" : \"certificateHolder\", \"dateIssued\" : \"2000-01-23\", \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceCategoryIds\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"document\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"issuer\" : \"issuer\", \"certificateTitle\" : \"certificateTitle\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(201));
        }, Runnable::run);

    }


    /**
     * DELETE /services/v1/service-providers/{serviceProviderId} : Delete Service Provider
     *
     * @param serviceProviderId The service provider id (required)
     * @return Response when service provider has been deleted (status code 204)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1ServiceProvidersServiceProviderIdDelete",
            summary = "Delete Service Provider",
            tags = {"Service Providers"},
            responses = {
                    @ApiResponse(responseCode = "204", description = "Response when service provider has been deleted"),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/services/v1/service-providers/{serviceProviderId}",
            produces = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<Void>> servicesV1ServiceProvidersServiceProviderIdDelete(
            @Parameter(name = "serviceProviderId", description = "The service provider id", required = true, in = ParameterIn.PATH) @PathVariable("serviceProviderId") UUID serviceProviderId
    ) {
        return CompletableFuture.completedFuture(new ResponseEntity<>(HttpStatus.OK));

    }


    /**
     * DELETE /services/v1/service-providers/{serviceProviderId}/documents/{documentId} : Delete Service Provider Document
     *
     * @param serviceProviderId The service provider id (required)
     * @param documentId        The document id (required)
     * @return Response when service provider document has been deleted (status code 204)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1ServiceProvidersServiceProviderIdDocumentsDocumentIdDelete",
            summary = "Delete Service Provider Document",
            tags = {"Service Providers"},
            responses = {
                    @ApiResponse(responseCode = "204", description = "Response when service provider document has been deleted"),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/services/v1/service-providers/{serviceProviderId}/documents/{documentId}",
            produces = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<Void>> servicesV1ServiceProvidersServiceProviderIdDocumentsDocumentIdDelete(
            @Parameter(name = "serviceProviderId", description = "The service provider id", required = true, in = ParameterIn.PATH) @PathVariable("serviceProviderId") UUID serviceProviderId,
            @Parameter(name = "documentId", description = "The document id", required = true, in = ParameterIn.PATH) @PathVariable("documentId") UUID documentId
    ) {
        return CompletableFuture.completedFuture(new ResponseEntity<>(HttpStatus.OK));

    }


    /**
     * POST /services/v1/service-providers/{serviceProviderId}/documents/{documentId}/document-upload : Upload Service Provider Document
     *
     * @param serviceProviderId The service provider id (required)
     * @param documentId        The document id (required)
     * @param file              (optional)
     * @return Response when Document was uploaded  (status code 200)
     * or There was an error with the request (status code 400)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1ServiceProvidersServiceProviderIdDocumentsDocumentIdDocumentUploadPost",
            summary = "Upload Service Provider Document",
            tags = {"Service Providers"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Response when Document was uploaded ", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Media.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "There was an error with the request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/services/v1/service-providers/{serviceProviderId}/documents/{documentId}/document-upload",
            produces = {"application/json"},
            consumes = {"multipart/form-data"}
    )
    default CompletableFuture<ResponseEntity<Media>> servicesV1ServiceProvidersServiceProviderIdDocumentsDocumentIdDocumentUploadPost(
            @Parameter(name = "serviceProviderId", description = "The service provider id", required = true, in = ParameterIn.PATH) @PathVariable("serviceProviderId") UUID serviceProviderId,
            @Parameter(name = "documentId", description = "The document id", required = true, in = ParameterIn.PATH) @PathVariable("documentId") UUID documentId,
            @Parameter(name = "file", description = "") @RequestPart(value = "file", required = false) MultipartFile file
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(200));
        }, Runnable::run);

    }


    /**
     * GET /services/v1/service-providers/{serviceProviderId}/documents/{documentId} : Get Service Provider Document
     *
     * @param serviceProviderId The service provider id (required)
     * @param documentId        The document id (required)
     * @return Response when a document is returned (status code 200)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1ServiceProvidersServiceProviderIdDocumentsDocumentIdGet",
            summary = "Get Service Provider Document",
            tags = {"Service Providers"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Response when a document is returned", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Document.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/services/v1/service-providers/{serviceProviderId}/documents/{documentId}",
            produces = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<Document>> servicesV1ServiceProvidersServiceProviderIdDocumentsDocumentIdGet(
            @Parameter(name = "serviceProviderId", description = "The service provider id", required = true, in = ParameterIn.PATH) @PathVariable("serviceProviderId") UUID serviceProviderId,
            @Parameter(name = "documentId", description = "The document id", required = true, in = ParameterIn.PATH) @PathVariable("documentId") UUID documentId
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"documentType\" : { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"name\" : \"name\", \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"document\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"documentRequirement\" : { \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"requiringCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"documentTypes\" : [ { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"name\" : \"name\", \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"name\" : \"name\", \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\", \"requiringState\" : { \"code\" : \"code\", \"name\" : \"name\" } } }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(200));
        }, Runnable::run);

    }


    /**
     * PATCH /services/v1/service-providers/{serviceProviderId}/documents/{documentId} : Update Service Provider Document
     *
     * @param serviceProviderId The service provider id (required)
     * @param documentId        The document id (required)
     * @return Response when service provider document was updated (status code 200)
     * or There was an error with the request (status code 400)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1ServiceProvidersServiceProviderIdDocumentsDocumentIdPatch",
            summary = "Update Service Provider Document",
            tags = {"Service Providers"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Response when service provider document was updated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Document.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "There was an error with the request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.PATCH,
            value = "/services/v1/service-providers/{serviceProviderId}/documents/{documentId}",
            produces = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<Document>> servicesV1ServiceProvidersServiceProviderIdDocumentsDocumentIdPatch(
            @Parameter(name = "serviceProviderId", description = "The service provider id", required = true, in = ParameterIn.PATH) @PathVariable("serviceProviderId") UUID serviceProviderId,
            @Parameter(name = "documentId", description = "The document id", required = true, in = ParameterIn.PATH) @PathVariable("documentId") UUID documentId
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"documentType\" : { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"name\" : \"name\", \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"document\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"documentRequirement\" : { \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"requiringCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"documentTypes\" : [ { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"name\" : \"name\", \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"name\" : \"name\", \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\", \"requiringState\" : { \"code\" : \"code\", \"name\" : \"name\" } } }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(200));
        }, Runnable::run);

    }


    /**
     * GET /services/v1/service-providers/{serviceProviderId}/documents : List Service Provider Documents
     *
     * @param serviceProviderId     The service provider id (required)
     * @param documentTypeId        Filter the documents by document type (optional)
     * @param documentRequirementId Filter documents by document requirement id (optional)
     * @param statuses              Filter documents by statuses e.g A comma separated list of statuses (optional)
     * @return Response when 0 or more service provider documents are returned (status code 200)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1ServiceProvidersServiceProviderIdDocumentsGet",
            summary = "List Service Provider Documents",
            tags = {"Service Providers"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Response when 0 or more service provider documents are returned", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = DocumentList.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/services/v1/service-providers/{serviceProviderId}/documents",
            produces = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<DocumentList>> servicesV1ServiceProvidersServiceProviderIdDocumentsGet(
            @Parameter(name = "serviceProviderId", description = "The service provider id", required = true, in = ParameterIn.PATH) @PathVariable("serviceProviderId") UUID serviceProviderId,
            @Parameter(name = "documentTypeId", description = "Filter the documents by document type", in = ParameterIn.QUERY) @Valid @RequestParam(value = "documentTypeId", required = false) String documentTypeId,
            @Parameter(name = "documentRequirementId", description = "Filter documents by document requirement id", in = ParameterIn.QUERY) @Valid @RequestParam(value = "documentRequirementId", required = false) String documentRequirementId,
            @Parameter(name = "statuses", description = "Filter documents by statuses e.g A comma separated list of statuses", in = ParameterIn.QUERY) @Valid @RequestParam(value = "statuses", required = false) String statuses
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"totalItemsCount\" : 6.027456183070403, \"pageCount\" : 0.8008281904610115, \"previousPage\" : \"previousPage\", \"data\" : [ { \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"documentType\" : { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"name\" : \"name\", \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"document\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"documentRequirement\" : { \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"requiringCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"documentTypes\" : [ { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"name\" : \"name\", \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"name\" : \"name\", \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\", \"requiringState\" : { \"code\" : \"code\", \"name\" : \"name\" } } }, { \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"documentType\" : { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"name\" : \"name\", \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"document\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"documentRequirement\" : { \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"requiringCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"documentTypes\" : [ { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"name\" : \"name\", \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"name\" : \"name\", \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\", \"requiringState\" : { \"code\" : \"code\", \"name\" : \"name\" } } } ], \"nextPage\" : \"nextPage\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(200));
        }, Runnable::run);

    }


    /**
     * POST /services/v1/service-providers/{serviceProviderId}/documents : Add Employee Provider Document
     *
     * @param serviceProviderId The service provider id (required)
     * @param documentCreate    (required)
     * @return Response when document has been added (status code 201)
     * or There was an error with the request (status code 400)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1ServiceProvidersServiceProviderIdDocumentsPost",
            summary = "Add Employee Provider Document",
            tags = {"Service Providers"},
            responses = {
                    @ApiResponse(responseCode = "201", description = "Response when document has been added", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Document.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "There was an error with the request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/services/v1/service-providers/{serviceProviderId}/documents",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<Document>> servicesV1ServiceProvidersServiceProviderIdDocumentsPost(
            @Parameter(name = "serviceProviderId", description = "The service provider id", required = true, in = ParameterIn.PATH) @PathVariable("serviceProviderId") UUID serviceProviderId,
            @Parameter(name = "DocumentCreate", description = "", required = true) @Valid @RequestBody DocumentCreate documentCreate
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"documentType\" : { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"name\" : \"name\", \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"document\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"documentRequirement\" : { \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"requiringCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"documentTypes\" : [ { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"name\" : \"name\", \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"name\" : \"name\", \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\", \"requiringState\" : { \"code\" : \"code\", \"name\" : \"name\" } } }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(201));
        }, Runnable::run);

    }


    /**
     * GET /services/v1/service-providers/{serviceProviderId} : Get Service Provider
     *
     * @param serviceProviderId The service provider id (required)
     * @return Response when service provider is returned (status code 200)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1ServiceProvidersServiceProviderIdGet",
            summary = "Get Service Provider",
            tags = {"Service Providers"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Response when service provider is returned", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ServiceProvider.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/services/v1/service-providers/{serviceProviderId}",
            produces = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<ServiceProvider>> servicesV1ServiceProvidersServiceProviderIdGet(
            @Parameter(name = "serviceProviderId", description = "The service provider id", required = true, in = ParameterIn.PATH) @PathVariable("serviceProviderId") UUID serviceProviderId
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"lastName\" : \"lastName\", \"country\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"address\" : { \"country\" : \"country\", \"city\" : \"city\", \"street\" : \"street\", \"postalCode\" : \"postalCode\", \"state\" : \"state\" }, \"languages\" : [ \"languages\", \"languages\" ], \"city\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"rating\" : 2.302136, \"bio\" : \"bio\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"certifications\" : [ { \"certificateHolder\" : \"certificateHolder\", \"dateIssued\" : \"2000-01-23\", \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceCategoryIds\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"document\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"issuer\" : \"issuer\", \"certificateTitle\" : \"certificateTitle\" }, { \"certificateHolder\" : \"certificateHolder\", \"dateIssued\" : \"2000-01-23\", \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceCategoryIds\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"document\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"issuer\" : \"issuer\", \"certificateTitle\" : \"certificateTitle\" } ], \"firstActivity\" : \"2000-01-23T04:56:07.000+00:00\", \"badge\" : \"badge\", \"firstName\" : \"firstName\", \"phoneNumber\" : \"phoneNumber\", \"reviewCount\" : 5.637376656633329, \"blockedDates\" : [ { \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"services\" : [ \"services\", \"services\" ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"services\" : [ \"services\", \"services\" ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"geohash\" : \"geohash\", \"lastActivity\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"state\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"email\" : \"email\", \"slug\" : \"slug\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(200));
        }, Runnable::run);

    }


    /**
     * GET /services/v1/service-providers/{serviceProviderId}/licences : List Service Provider Licences
     *
     * @param serviceProviderId The service provider id (required)
     * @return Response when 0 or more licences are returned (status code 200)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1ServiceProvidersServiceProviderIdLicencesGet",
            summary = "List Service Provider Licences",
            tags = {"Service Providers"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Response when 0 or more licences are returned", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = LicenceList.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/services/v1/service-providers/{serviceProviderId}/licences",
            produces = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<LicenceList>> servicesV1ServiceProvidersServiceProviderIdLicencesGet(
            @Parameter(name = "serviceProviderId", description = "The service provider id", required = true, in = ParameterIn.PATH) @PathVariable("serviceProviderId") UUID serviceProviderId
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"totalItemsCount\" : 6.027456183070403, \"pageCount\" : 0.8008281904610115, \"previousPage\" : \"previousPage\", \"data\" : [ { \"licenceRequirement\" : { \"country\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"state\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"licenceIssuers\" : [ { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"serviceCategory\" : { \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"parentId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"slug\" : \"slug\" }, \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"licenceIssuer\" : { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"licenceNumber\" : \"licenceNumber\", \"document\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"validUntil\" : \"2000-01-23\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"licenceRequirement\" : { \"country\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"state\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"licenceIssuers\" : [ { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"serviceCategory\" : { \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"parentId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"slug\" : \"slug\" }, \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"licenceIssuer\" : { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"licenceNumber\" : \"licenceNumber\", \"document\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"validUntil\" : \"2000-01-23\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"nextPage\" : \"nextPage\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(200));
        }, Runnable::run);

    }


    /**
     * DELETE /services/v1/service-providers/{serviceProviderId}/licences/{licenceId} : Delete Service Provider Licence
     *
     * @param serviceProviderId The service provider id (required)
     * @param licenceId         The licence id (required)
     * @return Response when service provider licence is deleted (status code 204)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1ServiceProvidersServiceProviderIdLicencesLicenceIdDelete",
            summary = "Delete Service Provider Licence",
            tags = {"Service Providers"},
            responses = {
                    @ApiResponse(responseCode = "204", description = "Response when service provider licence is deleted"),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/services/v1/service-providers/{serviceProviderId}/licences/{licenceId}",
            produces = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<Void>> servicesV1ServiceProvidersServiceProviderIdLicencesLicenceIdDelete(
            @Parameter(name = "serviceProviderId", description = "The service provider id", required = true, in = ParameterIn.PATH) @PathVariable("serviceProviderId") UUID serviceProviderId,
            @Parameter(name = "licenceId", description = "The licence id", required = true, in = ParameterIn.PATH) @PathVariable("licenceId") UUID licenceId
    ) {
        return CompletableFuture.completedFuture(new ResponseEntity<>(HttpStatus.OK));

    }


    /**
     * GET /services/v1/service-providers/{serviceProviderId}/licences/{licenceId} : Get Service Provider Licence
     *
     * @param serviceProviderId The service provider id (required)
     * @param licenceId         The licence id (required)
     * @return Response when service provider licence is returned (status code 200)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1ServiceProvidersServiceProviderIdLicencesLicenceIdGet",
            summary = "Get Service Provider Licence",
            tags = {"Service Providers"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Response when service provider licence is returned", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Licence.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/services/v1/service-providers/{serviceProviderId}/licences/{licenceId}",
            produces = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<Licence>> servicesV1ServiceProvidersServiceProviderIdLicencesLicenceIdGet(
            @Parameter(name = "serviceProviderId", description = "The service provider id", required = true, in = ParameterIn.PATH) @PathVariable("serviceProviderId") UUID serviceProviderId,
            @Parameter(name = "licenceId", description = "The licence id", required = true, in = ParameterIn.PATH) @PathVariable("licenceId") UUID licenceId
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"licenceRequirement\" : { \"country\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"state\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"licenceIssuers\" : [ { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"serviceCategory\" : { \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"parentId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"slug\" : \"slug\" }, \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"licenceIssuer\" : { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"licenceNumber\" : \"licenceNumber\", \"document\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"validUntil\" : \"2000-01-23\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(200));
        }, Runnable::run);

    }


    /**
     * POST /services/v1/service-providers/{serviceProviderId}/licences/{licenceId}/licence-upload : Upload Licence
     *
     * @param serviceProviderId The service provider id (required)
     * @param licenceId         The licence id (required)
     * @param file              (optional)
     * @return Response when Licence was uploaded  (status code 200)
     * or There was an error with the request (status code 400)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1ServiceProvidersServiceProviderIdLicencesLicenceIdLicenceUploadPost",
            summary = "Upload Licence",
            tags = {"Service Providers"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Response when Licence was uploaded ", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Media.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "There was an error with the request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/services/v1/service-providers/{serviceProviderId}/licences/{licenceId}/licence-upload",
            produces = {"application/json"},
            consumes = {"multipart/form-data"}
    )
    default CompletableFuture<ResponseEntity<Media>> servicesV1ServiceProvidersServiceProviderIdLicencesLicenceIdLicenceUploadPost(
            @Parameter(name = "serviceProviderId", description = "The service provider id", required = true, in = ParameterIn.PATH) @PathVariable("serviceProviderId") UUID serviceProviderId,
            @Parameter(name = "licenceId", description = "The licence id", required = true, in = ParameterIn.PATH) @PathVariable("licenceId") UUID licenceId,
            @Parameter(name = "file", description = "") @RequestPart(value = "file", required = false) MultipartFile file
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(200));
        }, Runnable::run);

    }


    /**
     * PATCH /services/v1/service-providers/{serviceProviderId}/licences/{licenceId} : Update Service Provider Licence
     *
     * @param serviceProviderId The service provider id (required)
     * @param licenceId         The licence id (required)
     * @param licencePatch      (required)
     * @return Response when service provider licence was patched (status code 200)
     * or There was an error with the request (status code 400)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1ServiceProvidersServiceProviderIdLicencesLicenceIdPatch",
            summary = "Update Service Provider Licence",
            tags = {"Service Providers"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Response when service provider licence was patched", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Licence.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "There was an error with the request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.PATCH,
            value = "/services/v1/service-providers/{serviceProviderId}/licences/{licenceId}",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<Licence>> servicesV1ServiceProvidersServiceProviderIdLicencesLicenceIdPatch(
            @Parameter(name = "serviceProviderId", description = "The service provider id", required = true, in = ParameterIn.PATH) @PathVariable("serviceProviderId") UUID serviceProviderId,
            @Parameter(name = "licenceId", description = "The licence id", required = true, in = ParameterIn.PATH) @PathVariable("licenceId") UUID licenceId,
            @Parameter(name = "LicencePatch", description = "", required = true) @Valid @RequestBody LicencePatch licencePatch
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"licenceRequirement\" : { \"country\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"state\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"licenceIssuers\" : [ { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"serviceCategory\" : { \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"parentId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"slug\" : \"slug\" }, \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"licenceIssuer\" : { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"licenceNumber\" : \"licenceNumber\", \"document\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"validUntil\" : \"2000-01-23\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(200));
        }, Runnable::run);

    }


    /**
     * POST /services/v1/service-providers/{serviceProviderId}/licences : Add Service Provider Licence
     *
     * @param serviceProviderId The service provider id (required)
     * @param licenceCreate     (required)
     * @return Response when service provider licence has been created. (status code 201)
     * or There was an error with the request (status code 400)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1ServiceProvidersServiceProviderIdLicencesPost",
            summary = "Add Service Provider Licence",
            tags = {"Service Providers"},
            responses = {
                    @ApiResponse(responseCode = "201", description = "Response when service provider licence has been created.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Licence.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "There was an error with the request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/services/v1/service-providers/{serviceProviderId}/licences",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<Licence>> servicesV1ServiceProvidersServiceProviderIdLicencesPost(
            @Parameter(name = "serviceProviderId", description = "The service provider id", required = true, in = ParameterIn.PATH) @PathVariable("serviceProviderId") UUID serviceProviderId,
            @Parameter(name = "LicenceCreate", description = "", required = true) @Valid @RequestBody LicenceCreate licenceCreate
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"licenceRequirement\" : { \"country\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"state\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"licenceIssuers\" : [ { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"serviceCategory\" : { \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"parentId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"slug\" : \"slug\" }, \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"licenceIssuer\" : { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"licenceNumber\" : \"licenceNumber\", \"document\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"validUntil\" : \"2000-01-23\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(201));
        }, Runnable::run);

    }


    /**
     * PATCH /services/v1/service-providers/{serviceProviderId} : Update Service Provider
     *
     * @param serviceProviderId    The service provider id (required)
     * @param serviceProviderPatch (required)
     * @return Response when service provider has been patched. (status code 200)
     * or There was an error with the request (status code 400)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     */
    @Operation(
            operationId = "servicesV1ServiceProvidersServiceProviderIdPatch",
            summary = "Update Service Provider",
            tags = {"Service Providers"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Response when service provider has been patched.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ServiceProvider.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "There was an error with the request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.PATCH,
            value = "/services/v1/service-providers/{serviceProviderId}",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<ServiceProvider>> servicesV1ServiceProvidersServiceProviderIdPatch(
            @Parameter(name = "serviceProviderId", description = "The service provider id", required = true, in = ParameterIn.PATH) @PathVariable("serviceProviderId") UUID serviceProviderId,
            @Parameter(name = "ServiceProviderPatch", description = "", required = true) @Valid @RequestBody ServiceProviderPatch serviceProviderPatch
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"lastName\" : \"lastName\", \"country\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"address\" : { \"country\" : \"country\", \"city\" : \"city\", \"street\" : \"street\", \"postalCode\" : \"postalCode\", \"state\" : \"state\" }, \"languages\" : [ \"languages\", \"languages\" ], \"city\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"rating\" : 2.302136, \"bio\" : \"bio\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"certifications\" : [ { \"certificateHolder\" : \"certificateHolder\", \"dateIssued\" : \"2000-01-23\", \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceCategoryIds\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"document\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"issuer\" : \"issuer\", \"certificateTitle\" : \"certificateTitle\" }, { \"certificateHolder\" : \"certificateHolder\", \"dateIssued\" : \"2000-01-23\", \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceCategoryIds\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"document\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"issuer\" : \"issuer\", \"certificateTitle\" : \"certificateTitle\" } ], \"firstActivity\" : \"2000-01-23T04:56:07.000+00:00\", \"badge\" : \"badge\", \"firstName\" : \"firstName\", \"phoneNumber\" : \"phoneNumber\", \"reviewCount\" : 5.637376656633329, \"blockedDates\" : [ { \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"services\" : [ \"services\", \"services\" ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"services\" : [ \"services\", \"services\" ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"geohash\" : \"geohash\", \"lastActivity\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"state\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"email\" : \"email\", \"slug\" : \"slug\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(200));
        }, Runnable::run);

    }


    /**
     * GET /services/v1/service-providers/{serviceProviderId}/reviews : List Service Provider Reviews
     *
     * @param serviceProviderId (required)
     * @return Response code when 0 or more reviews are returned (status code 200)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1ServiceProvidersServiceProviderIdReviewsGet",
            summary = "List Service Provider Reviews",
            tags = {"Service Providers"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Response code when 0 or more reviews are returned", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ReviewList.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/services/v1/service-providers/{serviceProviderId}/reviews",
            produces = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<ReviewList>> servicesV1ServiceProvidersServiceProviderIdReviewsGet(
            @Parameter(name = "serviceProviderId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("serviceProviderId") UUID serviceProviderId
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"totalItemsCount\" : 1.4658129805029452, \"pageCount\" : 6.027456183070403, \"previousPage\" : \"previousPage\", \"data\" : [ { \"reviewDate\" : \"2000-01-23T04:56:07.000+00:00\", \"review\" : \"review\", \"service\" : { \"baseDuration\" : 5.962133916683182, \"bookingTypes\" : [ null, null ], \"reviewCount\" : 6.027456183070403, \"provider\" : { \"lastName\" : \"lastName\", \"country\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"address\" : { \"country\" : \"country\", \"city\" : \"city\", \"street\" : \"street\", \"postalCode\" : \"postalCode\", \"state\" : \"state\" }, \"languages\" : [ \"languages\", \"languages\" ], \"city\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"rating\" : 2.302136, \"bio\" : \"bio\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"certifications\" : [ { \"certificateHolder\" : \"certificateHolder\", \"dateIssued\" : \"2000-01-23\", \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceCategoryIds\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"document\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"issuer\" : \"issuer\", \"certificateTitle\" : \"certificateTitle\" }, { \"certificateHolder\" : \"certificateHolder\", \"dateIssued\" : \"2000-01-23\", \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceCategoryIds\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"document\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"issuer\" : \"issuer\", \"certificateTitle\" : \"certificateTitle\" } ], \"firstActivity\" : \"2000-01-23T04:56:07.000+00:00\", \"badge\" : \"badge\", \"firstName\" : \"firstName\", \"phoneNumber\" : \"phoneNumber\", \"reviewCount\" : 5.637376656633329, \"blockedDates\" : [ { \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"services\" : [ \"services\", \"services\" ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"services\" : [ \"services\", \"services\" ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"geohash\" : \"geohash\", \"lastActivity\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"state\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"email\" : \"email\", \"slug\" : \"slug\" }, \"rating\" : 0.8008282, \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceCategory\" : { \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"parentId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"slug\" : \"slug\" }, \"slug\" : \"slug\", \"basePrice\" : 1.4658129 }, \"rating\" : 0.8008282, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"reviewer\" : { \"name\" : \"name\", \"location\" : \"location\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" } }, \"parentId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"reviewDate\" : \"2000-01-23T04:56:07.000+00:00\", \"review\" : \"review\", \"service\" : { \"baseDuration\" : 5.962133916683182, \"bookingTypes\" : [ null, null ], \"reviewCount\" : 6.027456183070403, \"provider\" : { \"lastName\" : \"lastName\", \"country\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"address\" : { \"country\" : \"country\", \"city\" : \"city\", \"street\" : \"street\", \"postalCode\" : \"postalCode\", \"state\" : \"state\" }, \"languages\" : [ \"languages\", \"languages\" ], \"city\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"rating\" : 2.302136, \"bio\" : \"bio\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"certifications\" : [ { \"certificateHolder\" : \"certificateHolder\", \"dateIssued\" : \"2000-01-23\", \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceCategoryIds\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"document\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"issuer\" : \"issuer\", \"certificateTitle\" : \"certificateTitle\" }, { \"certificateHolder\" : \"certificateHolder\", \"dateIssued\" : \"2000-01-23\", \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceCategoryIds\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"document\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"issuer\" : \"issuer\", \"certificateTitle\" : \"certificateTitle\" } ], \"firstActivity\" : \"2000-01-23T04:56:07.000+00:00\", \"badge\" : \"badge\", \"firstName\" : \"firstName\", \"phoneNumber\" : \"phoneNumber\", \"reviewCount\" : 5.637376656633329, \"blockedDates\" : [ { \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"services\" : [ \"services\", \"services\" ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"services\" : [ \"services\", \"services\" ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"geohash\" : \"geohash\", \"lastActivity\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"state\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"email\" : \"email\", \"slug\" : \"slug\" }, \"rating\" : 0.8008282, \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceCategory\" : { \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"parentId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"slug\" : \"slug\" }, \"slug\" : \"slug\", \"basePrice\" : 1.4658129 }, \"rating\" : 0.8008282, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"reviewer\" : { \"name\" : \"name\", \"location\" : \"location\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" } }, \"parentId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"nextPage\" : \"nextPage\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(200));
        }, Runnable::run);

    }


    /**
     * GET /services/v1/services : List services
     *
     * @param serviceCategoryId The service category id (optional)
     * @param search            The services search terms (optional)
     * @param serviceProviderId The service Provider id (optional)
     * @param geohash           The geohash to use in the service search (optional)
     * @param slug              The service slug (optional)
     * @return The service returns zero or more service entries (status code 200)
     */
    @Operation(
            operationId = "servicesV1ServicesGet",
            summary = "List services",
            tags = {"Services"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "The service returns zero or more service entries", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ServiceList.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/services/v1/services",
            produces = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<ServiceList>> servicesV1ServicesGet(
            @Parameter(name = "serviceCategoryId", description = "The service category id", in = ParameterIn.QUERY) @Valid @RequestParam(value = "serviceCategoryId", required = false) UUID serviceCategoryId,
            @Parameter(name = "search", description = "The services search terms", in = ParameterIn.QUERY) @Valid @RequestParam(value = "search", required = false) String search,
            @Parameter(name = "serviceProviderId", description = "The service Provider id", in = ParameterIn.QUERY) @Valid @RequestParam(value = "serviceProviderId", required = false) UUID serviceProviderId,
            @Parameter(name = "geohash", description = "The geohash to use in the service search", in = ParameterIn.QUERY) @Valid @RequestParam(value = "geohash", required = false) String geohash,
            @Parameter(name = "slug", description = "The service slug", in = ParameterIn.QUERY) @Valid @RequestParam(value = "slug", required = false) String slug
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"totalItemsCount\" : 9.301444243932576, \"pageCount\" : 7.061401241503109, \"previousPage\" : \"previousPage\", \"data\" : [ { \"baseDuration\" : 5.962133916683182, \"bookingTypes\" : [ null, null ], \"reviewCount\" : 6.027456183070403, \"provider\" : { \"lastName\" : \"lastName\", \"country\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"address\" : { \"country\" : \"country\", \"city\" : \"city\", \"street\" : \"street\", \"postalCode\" : \"postalCode\", \"state\" : \"state\" }, \"languages\" : [ \"languages\", \"languages\" ], \"city\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"rating\" : 2.302136, \"bio\" : \"bio\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"certifications\" : [ { \"certificateHolder\" : \"certificateHolder\", \"dateIssued\" : \"2000-01-23\", \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceCategoryIds\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"document\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"issuer\" : \"issuer\", \"certificateTitle\" : \"certificateTitle\" }, { \"certificateHolder\" : \"certificateHolder\", \"dateIssued\" : \"2000-01-23\", \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceCategoryIds\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"document\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"issuer\" : \"issuer\", \"certificateTitle\" : \"certificateTitle\" } ], \"firstActivity\" : \"2000-01-23T04:56:07.000+00:00\", \"badge\" : \"badge\", \"firstName\" : \"firstName\", \"phoneNumber\" : \"phoneNumber\", \"reviewCount\" : 5.637376656633329, \"blockedDates\" : [ { \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"services\" : [ \"services\", \"services\" ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"services\" : [ \"services\", \"services\" ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"geohash\" : \"geohash\", \"lastActivity\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"state\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"email\" : \"email\", \"slug\" : \"slug\" }, \"rating\" : 0.8008282, \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceCategory\" : { \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"parentId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"slug\" : \"slug\" }, \"slug\" : \"slug\", \"basePrice\" : 1.4658129 }, { \"baseDuration\" : 5.962133916683182, \"bookingTypes\" : [ null, null ], \"reviewCount\" : 6.027456183070403, \"provider\" : { \"lastName\" : \"lastName\", \"country\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"address\" : { \"country\" : \"country\", \"city\" : \"city\", \"street\" : \"street\", \"postalCode\" : \"postalCode\", \"state\" : \"state\" }, \"languages\" : [ \"languages\", \"languages\" ], \"city\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"rating\" : 2.302136, \"bio\" : \"bio\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"certifications\" : [ { \"certificateHolder\" : \"certificateHolder\", \"dateIssued\" : \"2000-01-23\", \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceCategoryIds\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"document\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"issuer\" : \"issuer\", \"certificateTitle\" : \"certificateTitle\" }, { \"certificateHolder\" : \"certificateHolder\", \"dateIssued\" : \"2000-01-23\", \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceCategoryIds\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"document\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"issuer\" : \"issuer\", \"certificateTitle\" : \"certificateTitle\" } ], \"firstActivity\" : \"2000-01-23T04:56:07.000+00:00\", \"badge\" : \"badge\", \"firstName\" : \"firstName\", \"phoneNumber\" : \"phoneNumber\", \"reviewCount\" : 5.637376656633329, \"blockedDates\" : [ { \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"services\" : [ \"services\", \"services\" ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"services\" : [ \"services\", \"services\" ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"geohash\" : \"geohash\", \"lastActivity\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"state\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"email\" : \"email\", \"slug\" : \"slug\" }, \"rating\" : 0.8008282, \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceCategory\" : { \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"parentId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"slug\" : \"slug\" }, \"slug\" : \"slug\", \"basePrice\" : 1.4658129 } ], \"nextPage\" : \"nextPage\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(200));
        }, Runnable::run);

    }


    /**
     * POST /services/v1/services : Create Service
     *
     * @param serviceCreate (required)
     * @return The service has been created (status code 201)
     * or There was an error with the request (status code 400)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     */
    @Operation(
            operationId = "servicesV1ServicesPost",
            summary = "Create Service",
            tags = {"Services"},
            responses = {
                    @ApiResponse(responseCode = "201", description = "The service has been created", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Service.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "There was an error with the request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/services/v1/services",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<Service>> servicesV1ServicesPost(
            @Parameter(name = "ServiceCreate", description = "", required = true) @Valid @RequestBody ServiceCreate serviceCreate
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"baseDuration\" : 9.301444243932576, \"bookingTypes\" : [ null, null ], \"amenities\" : [ { \"name\" : \"name\", \"icon\" : \"icon\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceCategoryId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"name\" : \"name\", \"icon\" : \"icon\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceCategoryId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"rating\" : 0.8008282, \"weekSchedule\" : [ { \"dayOfWeek\" : \"mon\", \"isOpen\" : true, \"timeSlots\" : [ { \"startTime\" : \"startTime\", \"endTime\" : \"endTime\" }, { \"startTime\" : \"startTime\", \"endTime\" : \"endTime\" } ] }, { \"dayOfWeek\" : \"mon\", \"isOpen\" : true, \"timeSlots\" : [ { \"startTime\" : \"startTime\", \"endTime\" : \"endTime\" }, { \"startTime\" : \"startTime\", \"endTime\" : \"endTime\" } ] } ], \"description\" : \"description\", \"launchDate\" : \"2000-01-23T04:56:07.000+00:00\", \"serviceCategory\" : { \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"parentId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"slug\" : \"slug\" }, \"licenceRequirements\" : [ { \"country\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"state\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"licenceIssuers\" : [ { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"serviceCategory\" : { \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"parentId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"slug\" : \"slug\" }, \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"country\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"state\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"licenceIssuers\" : [ { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"serviceCategory\" : { \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"parentId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"slug\" : \"slug\" }, \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"lastUpdated\" : \"2000-01-23T04:56:07.000+00:00\", \"bufferTime\" : { \"before\" : 1.4658129805029452, \"after\" : 5.962133916683182 }, \"serviceOfferings\" : [ { \"duration\" : 3.616076749251911, \"price\" : 2.027123, \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"duration\" : 3.616076749251911, \"price\" : 2.027123, \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"reviewCount\" : 6.027456183070403, \"provider\" : { \"lastName\" : \"lastName\", \"country\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"address\" : { \"country\" : \"country\", \"city\" : \"city\", \"street\" : \"street\", \"postalCode\" : \"postalCode\", \"state\" : \"state\" }, \"languages\" : [ \"languages\", \"languages\" ], \"city\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"rating\" : 2.302136, \"bio\" : \"bio\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"certifications\" : [ { \"certificateHolder\" : \"certificateHolder\", \"dateIssued\" : \"2000-01-23\", \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceCategoryIds\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"document\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"issuer\" : \"issuer\", \"certificateTitle\" : \"certificateTitle\" }, { \"certificateHolder\" : \"certificateHolder\", \"dateIssued\" : \"2000-01-23\", \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceCategoryIds\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"document\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"issuer\" : \"issuer\", \"certificateTitle\" : \"certificateTitle\" } ], \"firstActivity\" : \"2000-01-23T04:56:07.000+00:00\", \"badge\" : \"badge\", \"firstName\" : \"firstName\", \"phoneNumber\" : \"phoneNumber\", \"reviewCount\" : 5.637376656633329, \"blockedDates\" : [ { \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"services\" : [ \"services\", \"services\" ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"services\" : [ \"services\", \"services\" ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"geohash\" : \"geohash\", \"lastActivity\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"state\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"email\" : \"email\", \"slug\" : \"slug\" }, \"name\" : \"name\", \"bookingWindow\" : { \"min\" : 2.3021358869347655, \"max\" : 5.637376656633329 }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"licences\" : [ { \"licenceRequirement\" : { \"country\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"state\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"licenceIssuers\" : [ { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"serviceCategory\" : { \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"parentId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"slug\" : \"slug\" }, \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"licenceIssuer\" : { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"licenceNumber\" : \"licenceNumber\", \"document\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"validUntil\" : \"2000-01-23\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"licenceRequirement\" : { \"country\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"state\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"licenceIssuers\" : [ { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"serviceCategory\" : { \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"parentId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"slug\" : \"slug\" }, \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"licenceIssuer\" : { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"licenceNumber\" : \"licenceNumber\", \"document\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"validUntil\" : \"2000-01-23\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"gallery\" : [ { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" } ], \"slug\" : \"slug\", \"basePrice\" : 7.0614014 }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(201));
        }, Runnable::run);

    }


    /**
     * DELETE /services/v1/services/{serviceId} : Delete Service
     *
     * @param serviceId (required)
     * @return The service was deleted (status code 204)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1ServicesServiceIdDelete",
            summary = "Delete Service",
            tags = {"Services"},
            responses = {
                    @ApiResponse(responseCode = "204", description = "The service was deleted"),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/services/v1/services/{serviceId}",
            produces = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<Void>> servicesV1ServicesServiceIdDelete(
            @Parameter(name = "serviceId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("serviceId") UUID serviceId
    ) {
        return CompletableFuture.completedFuture(new ResponseEntity<>(HttpStatus.OK));

    }


    /**
     * DELETE /services/v1/services/{serviceId}/gallery-upload/{imageId} : Delete Gallery Image
     *
     * @param serviceId The service id (required)
     * @param imageId   The image id (required)
     * @return Response when gallery image was deleted (status code 204)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1ServicesServiceIdGalleryUploadImageIdDelete",
            summary = "Delete Gallery Image",
            tags = {"Services"},
            responses = {
                    @ApiResponse(responseCode = "204", description = "Response when gallery image was deleted"),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/services/v1/services/{serviceId}/gallery-upload/{imageId}",
            produces = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<Void>> servicesV1ServicesServiceIdGalleryUploadImageIdDelete(
            @Parameter(name = "serviceId", description = "The service id", required = true, in = ParameterIn.PATH) @PathVariable("serviceId") UUID serviceId,
            @Parameter(name = "imageId", description = "The image id", required = true, in = ParameterIn.PATH) @PathVariable("imageId") String imageId
    ) {
        return CompletableFuture.completedFuture(new ResponseEntity<>(HttpStatus.OK));

    }


    /**
     * POST /services/v1/services/{serviceId}/gallery-upload : Upload Service Image Gallery
     *
     * @param serviceId The service id (required)
     * @param files     (optional)
     * @return Response when service image gallery was uploaded  (status code 200)
     * or There was an error with the request (status code 400)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1ServicesServiceIdGalleryUploadPost",
            summary = "Upload Service Image Gallery",
            tags = {"Services"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Response when service image gallery was uploaded ", content = {
                            @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Media.class)))
                    }),
                    @ApiResponse(responseCode = "400", description = "There was an error with the request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/services/v1/services/{serviceId}/gallery-upload",
            produces = {"application/json"},
            consumes = {"multipart/form-data"}
    )
    default CompletableFuture<ResponseEntity<List<Media>>> servicesV1ServicesServiceIdGalleryUploadPost(
            @Parameter(name = "serviceId", description = "The service id", required = true, in = ParameterIn.PATH) @PathVariable("serviceId") UUID serviceId,
            @Parameter(name = "files", description = "") @RequestPart(value = "files", required = false) List<MultipartFile> files
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "[ { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" } ]";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(200));
        }, Runnable::run);

    }


    /**
     * GET /services/v1/services/{serviceId} : Get Service
     *
     * @param serviceId (required)
     * @return The requested service was returned (status code 200)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1ServicesServiceIdGet",
            summary = "Get Service",
            tags = {"Services"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "The requested service was returned", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Service.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/services/v1/services/{serviceId}",
            produces = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<Service>> servicesV1ServicesServiceIdGet(
            @Parameter(name = "serviceId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("serviceId") UUID serviceId
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"baseDuration\" : 9.301444243932576, \"bookingTypes\" : [ null, null ], \"amenities\" : [ { \"name\" : \"name\", \"icon\" : \"icon\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceCategoryId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"name\" : \"name\", \"icon\" : \"icon\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceCategoryId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"rating\" : 0.8008282, \"weekSchedule\" : [ { \"dayOfWeek\" : \"mon\", \"isOpen\" : true, \"timeSlots\" : [ { \"startTime\" : \"startTime\", \"endTime\" : \"endTime\" }, { \"startTime\" : \"startTime\", \"endTime\" : \"endTime\" } ] }, { \"dayOfWeek\" : \"mon\", \"isOpen\" : true, \"timeSlots\" : [ { \"startTime\" : \"startTime\", \"endTime\" : \"endTime\" }, { \"startTime\" : \"startTime\", \"endTime\" : \"endTime\" } ] } ], \"description\" : \"description\", \"launchDate\" : \"2000-01-23T04:56:07.000+00:00\", \"serviceCategory\" : { \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"parentId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"slug\" : \"slug\" }, \"licenceRequirements\" : [ { \"country\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"state\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"licenceIssuers\" : [ { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"serviceCategory\" : { \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"parentId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"slug\" : \"slug\" }, \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"country\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"state\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"licenceIssuers\" : [ { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"serviceCategory\" : { \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"parentId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"slug\" : \"slug\" }, \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"lastUpdated\" : \"2000-01-23T04:56:07.000+00:00\", \"bufferTime\" : { \"before\" : 1.4658129805029452, \"after\" : 5.962133916683182 }, \"serviceOfferings\" : [ { \"duration\" : 3.616076749251911, \"price\" : 2.027123, \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"duration\" : 3.616076749251911, \"price\" : 2.027123, \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"reviewCount\" : 6.027456183070403, \"provider\" : { \"lastName\" : \"lastName\", \"country\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"address\" : { \"country\" : \"country\", \"city\" : \"city\", \"street\" : \"street\", \"postalCode\" : \"postalCode\", \"state\" : \"state\" }, \"languages\" : [ \"languages\", \"languages\" ], \"city\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"rating\" : 2.302136, \"bio\" : \"bio\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"certifications\" : [ { \"certificateHolder\" : \"certificateHolder\", \"dateIssued\" : \"2000-01-23\", \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceCategoryIds\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"document\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"issuer\" : \"issuer\", \"certificateTitle\" : \"certificateTitle\" }, { \"certificateHolder\" : \"certificateHolder\", \"dateIssued\" : \"2000-01-23\", \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceCategoryIds\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"document\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"issuer\" : \"issuer\", \"certificateTitle\" : \"certificateTitle\" } ], \"firstActivity\" : \"2000-01-23T04:56:07.000+00:00\", \"badge\" : \"badge\", \"firstName\" : \"firstName\", \"phoneNumber\" : \"phoneNumber\", \"reviewCount\" : 5.637376656633329, \"blockedDates\" : [ { \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"services\" : [ \"services\", \"services\" ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"services\" : [ \"services\", \"services\" ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"geohash\" : \"geohash\", \"lastActivity\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"state\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"email\" : \"email\", \"slug\" : \"slug\" }, \"name\" : \"name\", \"bookingWindow\" : { \"min\" : 2.3021358869347655, \"max\" : 5.637376656633329 }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"licences\" : [ { \"licenceRequirement\" : { \"country\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"state\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"licenceIssuers\" : [ { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"serviceCategory\" : { \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"parentId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"slug\" : \"slug\" }, \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"licenceIssuer\" : { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"licenceNumber\" : \"licenceNumber\", \"document\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"validUntil\" : \"2000-01-23\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"licenceRequirement\" : { \"country\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"state\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"licenceIssuers\" : [ { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"serviceCategory\" : { \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"parentId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"slug\" : \"slug\" }, \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"licenceIssuer\" : { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"licenceNumber\" : \"licenceNumber\", \"document\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"validUntil\" : \"2000-01-23\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"gallery\" : [ { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" } ], \"slug\" : \"slug\", \"basePrice\" : 7.0614014 }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(200));
        }, Runnable::run);

    }


    /**
     * PATCH /services/v1/services/{serviceId} : Update Service
     *
     * @param serviceId    (required)
     * @param servicePatch (required)
     * @return The service has been updated successfully (status code 200)
     * or There was an error with the request (status code 400)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1ServicesServiceIdPatch",
            summary = "Update Service",
            tags = {"Services"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "The service has been updated successfully", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Service.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "There was an error with the request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.PATCH,
            value = "/services/v1/services/{serviceId}",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<Service>> servicesV1ServicesServiceIdPatch(
            @Parameter(name = "serviceId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("serviceId") UUID serviceId,
            @Parameter(name = "ServicePatch", description = "", required = true) @Valid @RequestBody ServicePatch servicePatch
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"baseDuration\" : 9.301444243932576, \"bookingTypes\" : [ null, null ], \"amenities\" : [ { \"name\" : \"name\", \"icon\" : \"icon\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceCategoryId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"name\" : \"name\", \"icon\" : \"icon\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceCategoryId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"rating\" : 0.8008282, \"weekSchedule\" : [ { \"dayOfWeek\" : \"mon\", \"isOpen\" : true, \"timeSlots\" : [ { \"startTime\" : \"startTime\", \"endTime\" : \"endTime\" }, { \"startTime\" : \"startTime\", \"endTime\" : \"endTime\" } ] }, { \"dayOfWeek\" : \"mon\", \"isOpen\" : true, \"timeSlots\" : [ { \"startTime\" : \"startTime\", \"endTime\" : \"endTime\" }, { \"startTime\" : \"startTime\", \"endTime\" : \"endTime\" } ] } ], \"description\" : \"description\", \"launchDate\" : \"2000-01-23T04:56:07.000+00:00\", \"serviceCategory\" : { \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"parentId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"slug\" : \"slug\" }, \"licenceRequirements\" : [ { \"country\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"state\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"licenceIssuers\" : [ { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"serviceCategory\" : { \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"parentId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"slug\" : \"slug\" }, \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"country\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"state\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"licenceIssuers\" : [ { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"serviceCategory\" : { \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"parentId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"slug\" : \"slug\" }, \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"lastUpdated\" : \"2000-01-23T04:56:07.000+00:00\", \"bufferTime\" : { \"before\" : 1.4658129805029452, \"after\" : 5.962133916683182 }, \"serviceOfferings\" : [ { \"duration\" : 3.616076749251911, \"price\" : 2.027123, \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"duration\" : 3.616076749251911, \"price\" : 2.027123, \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"reviewCount\" : 6.027456183070403, \"provider\" : { \"lastName\" : \"lastName\", \"country\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"address\" : { \"country\" : \"country\", \"city\" : \"city\", \"street\" : \"street\", \"postalCode\" : \"postalCode\", \"state\" : \"state\" }, \"languages\" : [ \"languages\", \"languages\" ], \"city\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"rating\" : 2.302136, \"bio\" : \"bio\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"certifications\" : [ { \"certificateHolder\" : \"certificateHolder\", \"dateIssued\" : \"2000-01-23\", \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceCategoryIds\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"document\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"issuer\" : \"issuer\", \"certificateTitle\" : \"certificateTitle\" }, { \"certificateHolder\" : \"certificateHolder\", \"dateIssued\" : \"2000-01-23\", \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceCategoryIds\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"document\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"issuer\" : \"issuer\", \"certificateTitle\" : \"certificateTitle\" } ], \"firstActivity\" : \"2000-01-23T04:56:07.000+00:00\", \"badge\" : \"badge\", \"firstName\" : \"firstName\", \"phoneNumber\" : \"phoneNumber\", \"reviewCount\" : 5.637376656633329, \"blockedDates\" : [ { \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"services\" : [ \"services\", \"services\" ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"services\" : [ \"services\", \"services\" ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"geohash\" : \"geohash\", \"lastActivity\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"state\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"email\" : \"email\", \"slug\" : \"slug\" }, \"name\" : \"name\", \"bookingWindow\" : { \"min\" : 2.3021358869347655, \"max\" : 5.637376656633329 }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"licences\" : [ { \"licenceRequirement\" : { \"country\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"state\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"licenceIssuers\" : [ { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"serviceCategory\" : { \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"parentId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"slug\" : \"slug\" }, \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"licenceIssuer\" : { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"licenceNumber\" : \"licenceNumber\", \"document\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"validUntil\" : \"2000-01-23\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"licenceRequirement\" : { \"country\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"state\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"licenceIssuers\" : [ { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"serviceCategory\" : { \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"parentId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"slug\" : \"slug\" }, \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"licenceIssuer\" : { \"issuingCountry\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"issuerName\" : \"issuerName\", \"licenceType\" : { \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"issuingState\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"licenceNumber\" : \"licenceNumber\", \"document\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"validUntil\" : \"2000-01-23\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"gallery\" : [ { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" } ], \"slug\" : \"slug\", \"basePrice\" : 7.0614014 }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(200));
        }, Runnable::run);

    }


    /**
     * GET /services/v1/services/{serviceId}/reviews : List Service Reviews
     *
     * @param serviceId The service id (required)
     * @return Response when 0 or more reviews are returned (status code 200)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1ServicesServiceIdReviewsGet",
            summary = "List Service Reviews",
            tags = {"Services"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Response when 0 or more reviews are returned", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ReviewList.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/services/v1/services/{serviceId}/reviews",
            produces = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<ReviewList>> servicesV1ServicesServiceIdReviewsGet(
            @Parameter(name = "serviceId", description = "The service id", required = true, in = ParameterIn.PATH) @PathVariable("serviceId") UUID serviceId
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"totalItemsCount\" : 1.4658129805029452, \"pageCount\" : 6.027456183070403, \"previousPage\" : \"previousPage\", \"data\" : [ { \"reviewDate\" : \"2000-01-23T04:56:07.000+00:00\", \"review\" : \"review\", \"service\" : { \"baseDuration\" : 5.962133916683182, \"bookingTypes\" : [ null, null ], \"reviewCount\" : 6.027456183070403, \"provider\" : { \"lastName\" : \"lastName\", \"country\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"address\" : { \"country\" : \"country\", \"city\" : \"city\", \"street\" : \"street\", \"postalCode\" : \"postalCode\", \"state\" : \"state\" }, \"languages\" : [ \"languages\", \"languages\" ], \"city\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"rating\" : 2.302136, \"bio\" : \"bio\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"certifications\" : [ { \"certificateHolder\" : \"certificateHolder\", \"dateIssued\" : \"2000-01-23\", \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceCategoryIds\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"document\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"issuer\" : \"issuer\", \"certificateTitle\" : \"certificateTitle\" }, { \"certificateHolder\" : \"certificateHolder\", \"dateIssued\" : \"2000-01-23\", \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceCategoryIds\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"document\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"issuer\" : \"issuer\", \"certificateTitle\" : \"certificateTitle\" } ], \"firstActivity\" : \"2000-01-23T04:56:07.000+00:00\", \"badge\" : \"badge\", \"firstName\" : \"firstName\", \"phoneNumber\" : \"phoneNumber\", \"reviewCount\" : 5.637376656633329, \"blockedDates\" : [ { \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"services\" : [ \"services\", \"services\" ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"services\" : [ \"services\", \"services\" ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"geohash\" : \"geohash\", \"lastActivity\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"state\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"email\" : \"email\", \"slug\" : \"slug\" }, \"rating\" : 0.8008282, \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceCategory\" : { \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"parentId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"slug\" : \"slug\" }, \"slug\" : \"slug\", \"basePrice\" : 1.4658129 }, \"rating\" : 0.8008282, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"reviewer\" : { \"name\" : \"name\", \"location\" : \"location\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" } }, \"parentId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"reviewDate\" : \"2000-01-23T04:56:07.000+00:00\", \"review\" : \"review\", \"service\" : { \"baseDuration\" : 5.962133916683182, \"bookingTypes\" : [ null, null ], \"reviewCount\" : 6.027456183070403, \"provider\" : { \"lastName\" : \"lastName\", \"country\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"address\" : { \"country\" : \"country\", \"city\" : \"city\", \"street\" : \"street\", \"postalCode\" : \"postalCode\", \"state\" : \"state\" }, \"languages\" : [ \"languages\", \"languages\" ], \"city\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"rating\" : 2.302136, \"bio\" : \"bio\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"certifications\" : [ { \"certificateHolder\" : \"certificateHolder\", \"dateIssued\" : \"2000-01-23\", \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceCategoryIds\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"document\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"issuer\" : \"issuer\", \"certificateTitle\" : \"certificateTitle\" }, { \"certificateHolder\" : \"certificateHolder\", \"dateIssued\" : \"2000-01-23\", \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceCategoryIds\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"document\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"issuer\" : \"issuer\", \"certificateTitle\" : \"certificateTitle\" } ], \"firstActivity\" : \"2000-01-23T04:56:07.000+00:00\", \"badge\" : \"badge\", \"firstName\" : \"firstName\", \"phoneNumber\" : \"phoneNumber\", \"reviewCount\" : 5.637376656633329, \"blockedDates\" : [ { \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"services\" : [ \"services\", \"services\" ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"serviceProviderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"services\" : [ \"services\", \"services\" ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"geohash\" : \"geohash\", \"lastActivity\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"state\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"email\" : \"email\", \"slug\" : \"slug\" }, \"rating\" : 0.8008282, \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceCategory\" : { \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" }, \"parentId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"slug\" : \"slug\" }, \"slug\" : \"slug\", \"basePrice\" : 1.4658129 }, \"rating\" : 0.8008282, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"reviewer\" : { \"name\" : \"name\", \"location\" : \"location\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"avatar\" : { \"id\" : \"id\", \"mimeType\" : \"image/jpeg\", \"url\" : \"url\" } }, \"parentId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"nextPage\" : \"nextPage\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(200));
        }, Runnable::run);

    }


    /**
     * POST /services/v1/services/{serviceId}/service-offerings : Add Service Offering
     *
     * @param serviceId             The service id (required)
     * @param serviceOfferingCreate (required)
     * @return Response when the service offering has been created (status code 201)
     * or There was an error with the request (status code 400)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1ServicesServiceIdServiceOfferingsPost",
            summary = "Add Service Offering",
            tags = {"Services"},
            responses = {
                    @ApiResponse(responseCode = "201", description = "Response when the service offering has been created", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ServiceOffering.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "There was an error with the request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/services/v1/services/{serviceId}/service-offerings",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<ServiceOffering>> servicesV1ServicesServiceIdServiceOfferingsPost(
            @Parameter(name = "serviceId", description = "The service id", required = true, in = ParameterIn.PATH) @PathVariable("serviceId") UUID serviceId,
            @Parameter(name = "ServiceOfferingCreate", description = "", required = true) @Valid @RequestBody ServiceOfferingCreate serviceOfferingCreate
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"duration\" : 3.616076749251911, \"price\" : 2.027123, \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(201));
        }, Runnable::run);

    }


    /**
     * DELETE /services/v1/services/{serviceId}/service-offerings/{serviceOfferingId} : Delete Service Offering
     *
     * @param serviceId         The service id (required)
     * @param serviceOfferingId The service offering id (required)
     * @return Response when the service offering has been deleted. (status code 204)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     * or The resource was not found (status code 404)
     */
    @Operation(
            operationId = "servicesV1ServicesServiceIdServiceOfferingsServiceOfferingIdDelete",
            summary = "Delete Service Offering",
            tags = {"Services"},
            responses = {
                    @ApiResponse(responseCode = "204", description = "Response when the service offering has been deleted."),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "The resource was not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/services/v1/services/{serviceId}/service-offerings/{serviceOfferingId}",
            produces = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<Void>> servicesV1ServicesServiceIdServiceOfferingsServiceOfferingIdDelete(
            @Parameter(name = "serviceId", description = "The service id", required = true, in = ParameterIn.PATH) @PathVariable("serviceId") UUID serviceId,
            @Parameter(name = "serviceOfferingId", description = "The service offering id", required = true, in = ParameterIn.PATH) @PathVariable("serviceOfferingId") UUID serviceOfferingId
    ) {
        return CompletableFuture.completedFuture(new ResponseEntity<>(HttpStatus.OK));

    }


    /**
     * PATCH /services/v1/services/{serviceId}/service-offerings/{serviceOfferingId} : Update Service Offering
     *
     * @param serviceId            The service id (required)
     * @param serviceOfferingId    The service offering id (required)
     * @param serviceOfferingPatch (required)
     * @return Response when the service offering has been updated (status code 200)
     * or There was an error with the request (status code 400)
     * or User is not authenticated (status code 401)
     * or User is not allowed to perform action (status code 403)
     */
    @Operation(
            operationId = "servicesV1ServicesServiceIdServiceOfferingsServiceOfferingIdPatch",
            summary = "Update Service Offering",
            tags = {"Services"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Response when the service offering has been updated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ServiceOffering.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "There was an error with the request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "User is not authenticated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform action", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.PATCH,
            value = "/services/v1/services/{serviceId}/service-offerings/{serviceOfferingId}",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    default CompletableFuture<ResponseEntity<ServiceOffering>> servicesV1ServicesServiceIdServiceOfferingsServiceOfferingIdPatch(
            @Parameter(name = "serviceId", description = "The service id", required = true, in = ParameterIn.PATH) @PathVariable("serviceId") UUID serviceId,
            @Parameter(name = "serviceOfferingId", description = "The service offering id", required = true, in = ParameterIn.PATH) @PathVariable("serviceOfferingId") UUID serviceOfferingId,
            @Parameter(name = "ServiceOfferingPatch", description = "", required = true) @Valid @RequestBody ServiceOfferingPatch serviceOfferingPatch
    ) {
        return CompletableFuture.supplyAsync(() -> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"duration\" : 3.616076749251911, \"price\" : 2.027123, \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"serviceId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.valueOf(200));
        }, Runnable::run);

    }

}
