---
openapi: 3.0.2
info:
  title: Services API
  version: 1.0.0
  description: The services API
  contact:
    name: Nelson Kana
    url: https://api.domivice.com
    email: nelson.kana@domivice.com
paths:
  /services/v1/service-categories/{serviceCategoryId}:
    get:
      tags:
        - Service Categories
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceCategory'
          description: The service category was returned
        "404":
          $ref: '#/components/responses/NotFound'
      operationId: getServiceCategory
      summary: Get Service Category
    delete:
      tags:
        - Service Categories
      parameters:
        - name: serviceCategoryId
          description: The service category Id
          schema:
            format: uuid
            type: string
          in: path
          required: true
      responses:
        "204":
          description: The service category was deleted
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      operationId: deleteServiceCategory
      summary: Delete Service Category
    patch:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceCategoryPatch'
        required: true
      tags:
        - Service Categories
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceCategory'
          description: The service category was updated
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      operationId: updateServiceCategory
      summary: Update Service Category
    parameters:
      - name: serviceCategoryId
        description: The service category Id
        schema:
          format: uuid
          type: string
        in: path
        required: true
  /services/v1/service-categories/{serviceCategoryId}/licence-requirements/{licenceRequirementId}:
    get:
      tags:
        - Service Categories
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenceRequirement'
          description: Response when the licence requirement is returned
        "404":
          $ref: '#/components/responses/NotFound'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      operationId: getLicenceRequirement
      summary: Get Licence Requirement
    delete:
      tags:
        - Service Categories
      responses:
        "204":
          description: Response when a licence requirement has been deleted
        "404":
          $ref: '#/components/responses/NotFound'
        "403":
          $ref: '#/components/responses/Forbidden'
        "401":
          $ref: '#/components/responses/Unauthorized'
      operationId: deleteLicenceRequirement
      summary: Delete Licence Requirement
    patch:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LicenceRequirementPatch'
        required: true
      tags:
        - Service Categories
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenceRequirement'
          description: Response when the licence requirement has been updated
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      operationId: updateLicenceRequirement
      summary: Update Licence Requirement
    parameters:
      - name: serviceCategoryId
        description: The service category id
        schema:
          format: uuid
          type: string
        in: path
        required: true
      - name: licenceRequirementId
        description: The licence requirement id
        schema:
          format: uuid
          type: string
        in: path
        required: true
  /services/v1/services/{serviceId}:
    get:
      tags:
        - Services
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: The requested service was returned
        "404":
          $ref: '#/components/responses/NotFound'
      operationId: getService
      summary: Get Service
    delete:
      tags:
        - Services
      responses:
        "204":
          description: The service was deleted
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      operationId: deleteService
      summary: Delete Service
    patch:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServicePatch'
        required: true
      tags:
        - Services
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: The service has been updated successfully
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      operationId: updateService
      summary: Update Service
    parameters:
      - name: serviceId
        schema:
          format: uuid
          type: string
        in: path
        required: true
  /services/v1/services/{serviceId}/service-offerings:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceOfferingCreate'
        required: true
      tags:
        - Services
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceOffering'
          description: Response when the service offering has been created
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      operationId: addServiceOffering
      summary: Add Service Offering
    parameters:
      - name: serviceId
        description: The service id
        schema:
          format: uuid
          type: string
        in: path
        required: true
  /services/v1/services/{serviceId}/service-offerings/{serviceOfferingId}:
    delete:
      tags:
        - Services
      responses:
        "204":
          description: Response when the service offering has been deleted.
        "404":
          $ref: '#/components/responses/NotFound'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      operationId: deleteServiceOffering
      summary: Delete Service Offering
    patch:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceOfferingPatch'
        required: true
      tags:
        - Services
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceOffering'
          description: Response when the service offering has been updated
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      operationId: updateServiceOffering
      summary: Update Service Offering
    parameters:
      - name: serviceId
        description: The service id
        schema:
          format: uuid
          type: string
        in: path
        required: true
      - name: serviceOfferingId
        description: The service offering id
        schema:
          format: uuid
          type: string
        in: path
        required: true
  /services/v1/licence-types/{licenceTypeId}:
    get:
      tags:
        - Licences
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenceType'
          description: Response when licence type is returned
        "404":
          $ref: '#/components/responses/NotFound'
        "403":
          $ref: '#/components/responses/Forbidden'
        "401":
          $ref: '#/components/responses/Unauthorized'
      operationId: getLicenceType
      summary: Get Licence Type
    delete:
      tags:
        - Licences
      responses:
        "204":
          description: Response when the licence type is deleted
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      operationId: deleteLicenceType
      summary: Delete Licence Type
    patch:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LicenceTypePatch'
        required: true
      tags:
        - Licences
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenceType'
          description: Response when licence type is updated
        "404":
          $ref: '#/components/responses/NotFound'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "400":
          $ref: '#/components/responses/BadRequest'
      operationId: updateLicenceType
      summary: Update Licence Type
    parameters:
      - name: licenceTypeId
        description: Licence Type id
        schema:
          format: uuid
          type: string
        in: path
        required: true
  /services/v1/licence-issuers/{licenceIssuerId}:
    get:
      tags:
        - Licences
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenceIssuer'
          description: Response when licence issuer is returned
        "404":
          $ref: '#/components/responses/NotFound'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      operationId: getLicenceIssuer
      summary: Get Licence Issuer
    delete:
      tags:
        - Licences
      responses:
        "204":
          description: Response when licence issuer is deleted
        "404":
          $ref: '#/components/responses/NotFound'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      operationId: deleteLicenceIssuer
      summary: Delete Licence Issuer
    patch:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LicenceIssuerPatch'
        required: true
      tags:
        - Licences
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenceIssuer'
          description: Response when the licence issuer is updated
        "404":
          $ref: '#/components/responses/NotFound'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "400":
          $ref: '#/components/responses/BadRequest'
      operationId: updateLicenceIssuer
      summary: Update Licence Issuer
    parameters:
      - name: licenceIssuerId
        description: Licence issuer id
        schema:
          format: uuid
          type: string
        in: path
        required: true
  /services/v1/service-providers/{serviceProviderId}/licences/{licenceId}:
    get:
      tags:
        - Service Providers
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Licence'
          description: Response when service provider licence is returned
        "404":
          $ref: '#/components/responses/NotFound'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      operationId: getServiceProviderLicence
      summary: Get Service Provider Licence
    delete:
      tags:
        - Service Providers
      responses:
        "204":
          description: Response when service provider licence is deleted
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "401":
          $ref: '#/components/responses/Unauthorized'
      operationId: deleteServiceProviderLicence
      summary: Delete Service Provider Licence
    patch:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LicencePatch'
        required: true
      tags:
        - Service Providers
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Licence'
          description: Response when service provider licence was patched
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      operationId: updateServiceProviderLicence
      summary: Update Service Provider Licence
    parameters:
      - name: serviceProviderId
        description: The service provider id
        schema:
          format: uuid
          type: string
        in: path
        required: true
      - name: licenceId
        description: The licence id
        schema:
          format: uuid
          type: string
        in: path
        required: true
  /services/v1/service-categories/{serviceCategoryId}/avatar-upload:
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  format: binary
                  type: string
        required: true
      tags:
        - Service Categories
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Media'
          description: The category image has been uploaded
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      operationId: uploadServiceCategoryAvatar
      summary: Upload Service Category Avatar
    parameters:
      - name: serviceCategoryId
        schema:
          format: uuid
          type: string
        in: path
        required: true
  /services/v1/services/{serviceId}/gallery-upload:
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    format: binary
                    type: string
        required: true
      tags:
        - Services
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Media'
          description: 'Response when service image gallery was uploaded '
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      operationId: uploadServiceImageGallery
      summary: Upload Service Image Gallery
    parameters:
      - name: serviceId
        description: The service id
        schema:
          format: uuid
          type: string
        in: path
        required: true
  /services/v1/services/{serviceId}/gallery-upload/{imageId}:
    delete:
      tags:
        - Services
      responses:
        "204":
          description: Response when gallery image was deleted
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      operationId: deleteGalleryImage
      summary: Delete Gallery Image
    parameters:
      - name: serviceId
        description: The service id
        schema:
          format: uuid
          type: string
        in: path
        required: true
      - name: imageId
        description: The image id
        schema:
          type: string
        in: path
        required: true
  /services/v1/service-providers/{serviceProviderId}:
    get:
      tags:
        - Service Providers
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceProvider'
          description: Response when service provider is returned
        "404":
          $ref: '#/components/responses/NotFound'
      operationId: getServiceProvider
      summary: Get Service Provider
    delete:
      tags:
        - Service Providers
      responses:
        "204":
          description: Response when service provider has been deleted
        "404":
          $ref: '#/components/responses/NotFound'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      operationId: deleteServiceProvider
      summary: Delete Service Provider
    patch:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceProviderPatch'
        required: true
      tags:
        - Service Providers
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceProvider'
          description: Response when service provider has been patched.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      operationId: updateServiceProvider
      summary: Update Service Provider
    parameters:
      - name: serviceProviderId
        description: The service provider id
        schema:
          format: uuid
          type: string
        in: path
        required: true
  /services/v1/service-providers/{serviceProviderId}/blocked-dates/{blockedDateId}:
    delete:
      tags:
        - Service Providers
      responses:
        "204":
          description: The response when the blocked date has been created
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      operationId: deleteBlockedDate
      summary: Delete Blocked Date
    patch:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockedDatePatch'
      tags:
        - Service Providers
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockedDate'
          description: Response when blocked date has been patched
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "400":
          $ref: '#/components/responses/BadRequest'
      operationId: updateBlockedDate
      summary: Update Blocked Date
    parameters:
      - name: serviceProviderId
        description: The service provider id
        schema:
          format: uuid
          type: string
        in: path
        required: true
      - name: blockedDateId
        description: The blocked date id
        schema:
          format: uuid
          type: string
        in: path
        required: true
  /services/v1/service-categories/{serviceCategoryId}/amenities:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AmenityCreate'
        required: true
      tags:
        - Service Categories
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Amenity'
          description: Response when amenity has been created
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      operationId: addAmenities
      summary: Add Amenities
    parameters:
      - name: serviceCategoryId
        description: The service category id
        schema:
          format: uuid
          type: string
        in: path
        required: true
  /services/v1/service-categories/{serviceCategoryId}/amenities/{amenityId}:
    delete:
      tags:
        - Service Categories
      responses:
        "204":
          description: Response when amenity has been deleted
        "404":
          $ref: '#/components/responses/NotFound'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      operationId: deleteAmenity
      summary: Delete Amenity
    patch:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AmenityPatch'
        required: true
      tags:
        - Service Categories
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Amenity'
          description: Response when the amenity has been updated
        "404":
          $ref: '#/components/responses/NotFound'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "400":
          $ref: '#/components/responses/BadRequest'
      operationId: updateAmenity
      summary: Update Amenity
    parameters:
      - name: serviceCategoryId
        description: The service category id
        schema:
          format: uuid
          type: string
        in: path
        required: true
      - name: amenityId
        description: The amenity id
        schema:
          format: uuid
          type: string
        in: path
        required: true
  /services/v1/service-providers/{serviceProviderId}/certifications:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertificationCreate'
        required: true
      tags:
        - Service Providers
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certification'
          description: Response when certification has been added
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "400":
          $ref: '#/components/responses/BadRequest'
      operationId: addCertification
      summary: Add Certification
    parameters:
      - name: serviceProviderId
        description: The service provider id
        schema:
          format: uuid
          type: string
        in: path
        required: true
  /services/v1/service-providers/{serviceProviderId}/certifications/{certificationId}:
    get:
      tags:
        - Service Providers
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certification'
          description: Response when certification is returned
        "404":
          $ref: '#/components/responses/NotFound'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      operationId: getCertification
      summary: Get Certification
    delete:
      tags:
        - Service Providers
      responses:
        "204":
          description: Response when certification has been deleted
        "404":
          $ref: '#/components/responses/NotFound'
        "403":
          $ref: '#/components/responses/Forbidden'
        "401":
          $ref: '#/components/responses/Unauthorized'
      operationId: removeCertification
      summary: Remove Certification
    patch:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertificationPatch'
        required: true
      tags:
        - Service Providers
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certification'
          description: Response when certification has been updated
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      operationId: updateCertification
      summary: Update Certification
    parameters:
      - name: serviceProviderId
        description: The service provider id
        schema:
          format: uuid
          type: string
        in: path
        required: true
      - name: certificationId
        description: The certification id
        schema:
          format: uuid
          type: string
        in: path
        required: true
  /services/v1/service-providers/{serviceProviderId}/certifications/{certificationId}/certification-upload:
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  format: binary
                  type: string
        required: true
      tags:
        - Service Providers
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Media'
          description: 'Response when certification was uploaded '
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      operationId: uploadCertification
      summary: Upload Certification
    parameters:
      - name: serviceProviderId
        description: The service provider id
        schema:
          format: uuid
          type: string
        in: path
        required: true
      - name: certificationId
        description: The certification id
        schema:
          format: uuid
          type: string
        in: path
        required: true
  /services/v1/service-providers/{serviceProviderId}/licences/{licenceId}/licence-upload:
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  format: binary
                  type: string
        required: true
      tags:
        - Service Providers
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Media'
          description: 'Response when Licence was uploaded '
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      operationId: uploadLicence
      summary: Upload Licence
    parameters:
      - name: serviceProviderId
        description: The service provider id
        schema:
          format: uuid
          type: string
        in: path
        required: true
      - name: licenceId
        description: The licence id
        schema:
          format: uuid
          type: string
        in: path
        required: true
  /services/v1/document-types/{documentTypeId}:
    get:
      tags:
        - Documents
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentType'
          description: Response when the document type is returned
        "404":
          $ref: '#/components/responses/NotFound'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      operationId: getDocumentType
      summary: Get Document Type
    delete:
      tags:
        - Documents
      responses:
        "204":
          description: Response when the document type has been deleted.
        "404":
          $ref: '#/components/responses/NotFound'
        "403":
          $ref: '#/components/responses/Forbidden'
        "401":
          $ref: '#/components/responses/Unauthorized'
      operationId: deleteDocumentType
      summary: Delete Document Type
    patch:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentTypePatch'
        required: true
      tags:
        - Documents
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentType'
          description: Response when document type has been updated
        "403":
          $ref: '#/components/responses/Forbidden'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "400":
          $ref: '#/components/responses/BadRequest'
      operationId: updateDocumentType
      summary: Update Document Type
    parameters:
      - name: documentTypeId
        description: The document type id
        schema:
          format: uuid
          type: string
        in: path
        required: true
  /services/v1/document-requirements/{documentRequirementId}:
    get:
      tags:
        - Documents
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentRequirement'
          description: Response when the document requirement is returned
        "404":
          $ref: '#/components/responses/NotFound'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      operationId: getDocumentRequirement
      summary: Get Document Requirement
    delete:
      tags:
        - Documents
      responses:
        "204":
          description: Response when document requirement is deleted
        "404":
          $ref: '#/components/responses/NotFound'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      operationId: deleteDocumentRequirement
      summary: Delete Document Requirement
    patch:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentRequirementPatch'
        required: true
      tags:
        - Documents
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentRequirement'
          description: Response when document requirement has been updated
        "404":
          $ref: '#/components/responses/NotFound'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "400":
          $ref: '#/components/responses/BadRequest'
      operationId: updateDocumentRequirement
      summary: Update Document Requirement
    parameters:
      - name: documentRequirementId
        description: The document requirement id
        schema:
          format: uuid
          type: string
        in: path
        required: true
  /services/v1/service-providers/{serviceProviderId}/documents/{documentId}:
    get:
      tags:
        - Service Providers
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
          description: Response when a document is returned
        "404":
          $ref: '#/components/responses/NotFound'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      operationId: getServiceProviderDocument
      summary: Get Service Provider Document
    delete:
      tags:
        - Service Providers
      responses:
        "204":
          description: Response when service provider document has been deleted
        "404":
          $ref: '#/components/responses/NotFound'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      operationId: deleteServiceProviderDocument
      summary: Delete Service Provider Document
    patch:
      tags:
        - Service Providers
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
          description: Response when service provider document was updated
        "404":
          $ref: '#/components/responses/NotFound'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "400":
          $ref: '#/components/responses/BadRequest'
      operationId: updateServiceProviderDocument
      summary: Update Service Provider Document
    parameters:
      - name: serviceProviderId
        description: The service provider id
        schema:
          format: uuid
          type: string
        in: path
        required: true
      - name: documentId
        description: The document id
        schema:
          format: uuid
          type: string
        in: path
        required: true
  /services/v1/service-providers/{serviceProviderId}/documents/{documentId}/document-upload:
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  format: binary
                  type: string
        required: true
      tags:
        - Service Providers
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Media'
          description: 'Response when Document was uploaded '
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      operationId: uploadServiceProviderDocument
      summary: Upload Service Provider Document
    parameters:
      - name: serviceProviderId
        description: The service provider id
        schema:
          format: uuid
          type: string
        in: path
        required: true
      - name: documentId
        description: The document id
        schema:
          format: uuid
          type: string
        in: path
        required: true
  /services/v1/document-requirements:
    get:
      tags:
        - Documents
      parameters:
        - name: search
          description: Document requirement search terms
          schema:
            type: string
          in: query
        - name: countryCode
          description: Filter document requirements by country code
          schema:
            type: string
          in: query
        - name: stateCode
          description: Filter Document requirement by state code
          schema:
            type: string
          in: query
        - name: statuses
          description: Filter document requirements by statuses e.g A comma separated
            list of statuses
          schema:
            type: string
          in: query
        - name: page
          description: The page requested. Page parameter can only be a positive integer
            greater than 0.
          schema:
            type: integer
          in: query
          required: false
        - name: pageSize
          description: The requested page size. Page size can only be between 1 and
            100
          schema:
            type: integer
          in: query
          required: false
        - name: sort
          description: "The result sorting. field1[:asc|desc][,field2[:asc|desc]] e.g.\
          \ firstName:desc,email:asc"
          schema:
            type: string
          in: query
          required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentRequirementList'
          description: Response when 0 or more document requirements are returned.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      operationId: listDocumentRequirements
      summary: List Document Requirements
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentRequirementCreate'
        required: true
      tags:
        - Documents
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentRequirement'
          description: Response when document requirement has been created
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      operationId: addDocumentRequirement
      summary: Add Document Requirement
  /services/v1/document-types:
    get:
      tags:
        - Documents
      parameters:
        - name: search
          description: The document type search terms
          schema:
            type: string
          in: query
        - name: stateCode
          description: Filter the document types by state code
          schema:
            type: string
          in: query
        - name: countryCode
          description: Filter the document type by country code
          schema:
            type: string
          in: query
        - name: page
          description: The page requested. Page parameter can only be a positive integer
            greater than 0.
          schema:
            type: integer
          in: query
          required: false
        - name: pageSize
          description: The requested page size. Page size can only be between 1 and
            100
          schema:
            type: integer
          in: query
          required: false
        - name: sort
          description: "The result sorting. field1[:asc|desc][,field2[:asc|desc]] e.g.\
          \ firstName:desc,email:asc"
          schema:
            type: string
          in: query
          required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentTypeList'
          description: Response when 0 or more document types are returned
        "401":
          $ref: '#/components/responses/Unauthorized'
      operationId: listDocumentTypes
      summary: List Document Types
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentTypeCreate'
        required: true
      tags:
        - Documents
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentType'
          description: Response when document type is created
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      operationId: createDocumentType
      summary: Create Document Type
  /services/v1/licence-issuers:
    get:
      tags:
        - Licences
      parameters:
        - name: search
          description: The search term
          schema:
            type: string
          in: query
        - name: countryCode
          description: Filter licence issuer by country code
          schema:
            type: string
          in: query
        - name: stateCode
          description: Filter licence issuers by state code
          schema:
            type: string
          in: query
        - name: licenceTypeId
          description: Filter licence type by licence type
          schema:
            type: string
          in: query
        - name: page
          description: The page requested. Page parameter can only be a positive integer
            greater than 0.
          schema:
            type: integer
          in: query
          required: false
        - name: pageSize
          description: The requested page size. Page size can only be between 1 and
            100
          schema:
            type: integer
          in: query
          required: false
        - name: sort
          description: "The result sorting. field1[:asc|desc][,field2[:asc|desc]] e.g.\
          \ firstName:desc,email:asc"
          schema:
            type: string
          in: query
          required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenceIssuerList'
          description: 'Response when 0 or more licence types are returned '
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      operationId: listLicenceIssuers
      summary: List Licence Issuers
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LicenceIssuerCreate'
        required: true
      tags:
        - Licences
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenceIssuer'
          description: Response when licence type is created
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      operationId: AddLicenceTypeIssuer
      summary: Add Licence Type Issuer
  /services/v1/licence-types:
    get:
      tags:
        - Licences
      parameters:
        - name: search
          description: The licence type search term
          schema:
            type: string
          in: query
        - name: page
          description: The page requested. Page parameter can only be a positive integer
            greater than 0.
          schema:
            type: integer
          in: query
          required: false
        - name: pageSize
          description: The requested page size. Page size can only be between 1 and
            100
          schema:
            type: integer
          in: query
          required: false
        - name: sort
          description: "The result sorting. field1[:asc|desc][,field2[:asc|desc]] e.g.\
          \ firstName:desc,email:asc"
          schema:
            type: string
          in: query
          required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenceTypeList'
          description: Response when 0 or more licence types are returned
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      operationId: listLicenceTypes
      summary: List Licence Types
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LicenceTypeCreate'
        required: true
      tags:
        - Licences
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenceType'
          description: Response when licence type is created
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      operationId: addLicenceType
      summary: Add Licence Type
  /services/v1/service-categories:
    get:
      tags:
        - Service Categories
      parameters:
        - name: search
          description: The search terms
          schema:
            type: string
          in: query
          required: false
        - name: parentId
          description: The service category parent id
          schema:
            format: uuid
            type: string
          in: query
        - name: slug
          description: The service category slug
          schema:
            type: string
          in: query
        - name: page
          description: The page requested. Page parameter can only be a positive integer
            greater than 0.
          schema:
            type: integer
          in: query
          required: false
        - name: pageSize
          description: The requested page size. Page size can only be between 1 and
            100
          schema:
            type: integer
          in: query
          required: false
        - name: sort
          description: "The result sorting. field1[:asc|desc][,field2[:asc|desc]] e.g.\
          \ firstName:desc,email:asc"
          schema:
            type: string
          in: query
          required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceCategoryList'
          description: A result set of zero or more services was returned
      operationId: listServicesCategories
      summary: List Services Categories
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceCategoryCreate'
        required: true
      tags:
        - Service Categories
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceCategory'
          description: The service category was successfully created
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      operationId: addServiceCategory
      summary: Add Service Category
  /services/v1/service-categories/{serviceCategoryId}/licence-requirements:
    get:
      tags:
        - Service Categories
      parameters:
        - name: countryCode
          description: Filter licence requirement by country code
          schema:
            type: string
          in: query
          required: false
        - name: stateCode
          description: Filter licence requirements by state code
          schema:
            type: string
          in: query
        - name: page
          description: The page requested. Page parameter can only be a positive integer
            greater than 0.
          schema:
            type: integer
          in: query
          required: false
        - name: pageSize
          description: The requested page size. Page size can only be between 1 and
            100
          schema:
            type: integer
          in: query
          required: false
        - name: sort
          description: "The result sorting. field1[:asc|desc][,field2[:asc|desc]] e.g.\
          \ firstName:desc,email:asc"
          schema:
            type: string
          in: query
          required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenceRequirementList'
          description: Response when 0 or more licence requirements are returned
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      operationId: listLicenceRequirements
      summary: List Licence Requirements
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LicenceRequirementCreate'
        required: true
      tags:
        - Service Categories
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenceRequirement'
          description: Response when a licence requirement has been created
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      operationId: addLicenceRequirement
      summary: Add Licence Requirement
    parameters:
      - name: serviceCategoryId
        description: The service category id
        schema:
          format: uuid
          type: string
        in: path
        required: true
  /services/v1/service-providers:
    get:
      tags:
        - Service Providers
      parameters:
        - name: slug
          description: The service provider slug
          schema:
            type: string
          in: query
        - name: statuses
          description: A comma seperated list of statuses to filter the service list
          schema:
            type: string
          in: query
          required: false
        - name: city
          description: Filter service providers by city code
          schema:
            type: string
          in: query
        - name: state
          description: Filter service providers by state code
          schema:
            type: string
          in: query
        - name: country
          description: Filter service providers by country code
          schema:
            type: string
          in: query
        - name: search
          description: Search the service providers by search term
          schema:
            type: string
          in: query
        - name: geohash
          description: Filter the service providers by geohash
          schema:
            type: string
          in: query
        - name: page
          description: The page requested. Page parameter can only be a positive integer
            greater than 0.
          schema:
            type: integer
          in: query
          required: false
        - name: pageSize
          description: The requested page size. Page size can only be between 1 and
            100
          schema:
            type: integer
          in: query
          required: false
        - name: sort
          description: "The result sorting. field1[:asc|desc][,field2[:asc|desc]] e.g.\
          \ firstName:desc,email:asc"
          schema:
            type: string
          in: query
          required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceProviderList'
          description: Response when 0 or more service providers are added
      operationId: listServiceProviders
      summary: List Service Providers
  /services/v1/service-providers/{serviceProviderId}/blocked-dates:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockedDateCreate'
        required: true
      tags:
        - Service Providers
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockedDate'
          description: Response when blocked date has been created
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      operationId: addBlockedDates
      summary: Add Blocked Dates
    parameters:
      - name: serviceProviderId
        description: Service provider id
        schema:
          format: uuid
          type: string
        in: path
        required: true
  /services/v1/service-providers/{serviceProviderId}/documents:
    get:
      tags:
        - Service Providers
      parameters:
        - name: documentTypeId
          description: Filter the documents by document type
          schema:
            type: string
          in: query
        - name: documentRequirementId
          description: Filter documents by document requirement id
          schema:
            type: string
          in: query
        - name: statuses
          description: Filter documents by statuses e.g A comma separated list of statuses
          schema:
            type: string
          in: query
        - name: page
          description: The page requested. Page parameter can only be a positive integer
            greater than 0.
          schema:
            type: integer
          in: query
          required: false
        - name: pageSize
          description: The requested page size. Page size can only be between 1 and
            100
          schema:
            type: integer
          in: query
          required: false
        - name: sort
          description: "The result sorting. field1[:asc|desc][,field2[:asc|desc]] e.g.\
          \ firstName:desc,email:asc"
          schema:
            type: string
          in: query
          required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentList'
          description: Response when 0 or more service provider documents are returned
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      operationId: listServiceProviderDocuments
      summary: List Service Provider Documents
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentCreate'
        required: true
      tags:
        - Service Providers
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
          description: Response when document has been added
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      operationId: addEmployeeProviderDocument
      summary: Add Employee Provider Document
    parameters:
      - name: serviceProviderId
        description: The service provider id
        schema:
          format: uuid
          type: string
        in: path
        required: true
  /services/v1/service-providers/{serviceProviderId}/licences:
    get:
      tags:
        - Service Providers
      parameters:
        - name: page
          description: The page requested. Page parameter can only be a positive integer
            greater than 0.
          schema:
            type: integer
          in: query
          required: false
        - name: pageSize
          description: The requested page size. Page size can only be between 1 and
            100
          schema:
            type: integer
          in: query
          required: false
        - name: sort
          description: "The result sorting. field1[:asc|desc][,field2[:asc|desc]] e.g.\
          \ firstName:desc,email:asc"
          schema:
            type: string
          in: query
          required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenceList'
          description: Response when 0 or more licences are returned
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      operationId: listServiceProviderLicences
      summary: List Service Provider Licences
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LicenceCreate'
        required: true
      tags:
        - Service Providers
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Licence'
          description: Response when service provider licence has been created.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      operationId: addServiceProviderLicence
      summary: Add Service Provider Licence
    parameters:
      - name: serviceProviderId
        description: The service provider id
        schema:
          format: uuid
          type: string
        in: path
        required: true
  /services/v1/service-providers/{serviceProviderId}/reviews:
    get:
      tags:
        - Service Providers
      parameters:
        - name: page
          description: The page requested. Page parameter can only be a positive integer
            greater than 0.
          schema:
            type: integer
          in: query
          required: false
        - name: pageSize
          description: The requested page size. Page size can only be between 1 and
            100
          schema:
            type: integer
          in: query
          required: false
        - name: sort
          description: "The result sorting. field1[:asc|desc][,field2[:asc|desc]] e.g.\
          \ firstName:desc,email:asc"
          schema:
            type: string
          in: query
          required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewList'
          description: Response code when 0 or more reviews are returned
        "404":
          $ref: '#/components/responses/NotFound'
      operationId: listServiceProviderReviews
      summary: List Service Provider Reviews
    parameters:
      - name: serviceProviderId
        schema:
          format: uuid
          type: string
        in: path
        required: true
  /services/v1/services:
    get:
      tags:
        - Services
      parameters:
        - name: serviceCategoryId
          description: The service category id
          schema:
            format: uuid
            type: string
          in: query
        - name: search
          description: The services search terms
          schema:
            type: string
          in: query
        - name: serviceProviderId
          description: The service Provider id
          schema:
            format: uuid
            type: string
          in: query
          required: false
        - name: geohash
          description: The geohash to use in the service search
          schema:
            type: string
          in: query
        - name: slug
          description: The service slug
          schema:
            type: string
          in: query
        - name: page
          description: The page requested. Page parameter can only be a positive integer
            greater than 0.
          schema:
            type: integer
          in: query
          required: false
        - name: pageSize
          description: The requested page size. Page size can only be between 1 and
            100
          schema:
            type: integer
          in: query
          required: false
        - name: sort
          description: "The result sorting. field1[:asc|desc][,field2[:asc|desc]] e.g.\
          \ firstName:desc,email:asc"
          schema:
            type: string
          in: query
          required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceList'
          description: The service returns zero or more service entries
      operationId: listServices
      summary: List Services
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceCreate'
        required: true
      tags:
        - Services
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: The service has been created
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      operationId: createService
      summary: Create Service
  /services/v1/services/{serviceId}/reviews:
    get:
      tags:
        - Services
      parameters:
        - name: page
          description: The page requested. Page parameter can only be a positive integer
            greater than 0.
          schema:
            type: integer
          in: query
          required: false
        - name: pageSize
          description: The requested page size. Page size can only be between 1 and
            100
          schema:
            type: integer
          in: query
          required: false
        - name: sort
          description: "The result sorting. field1[:asc|desc][,field2[:asc|desc]] e.g.\
          \ firstName:desc,email:asc"
          schema:
            type: string
          in: query
          required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewList'
          description: Response when 0 or more reviews are returned
        "404":
          $ref: '#/components/responses/NotFound'
      operationId: listServiceReviews
      summary: List Service Reviews
    parameters:
      - name: serviceId
        description: The service id
        schema:
          format: uuid
          type: string
        in: path
        required: true
components:
  schemas:
    ServiceCategoryList:
      description: ""
      required:
        - totalItemsCount
        - pageCount
        - data
        - nextPage
        - previousPage
      type: object
      properties:
        data:
          description: The list of items in current page
          type: array
          items:
            $ref: '#/components/schemas/ServiceCategory'
        nextPage:
          description: The URL to access the next page
          type: string
        pageCount:
          description: The page count
          type: integer
        previousPage:
          description: The URL to access the previous page
          type: string
        totalItemsCount:
          description: The total number of items in the database
          type: integer
    ServiceList:
      description: ""
      required:
        - totalItemsCount
        - pageCount
        - data
        - nextPage
        - previousPage
      type: object
      properties:
        data:
          description: The list of items in current page
          type: array
          items:
            $ref: '#/components/schemas/ServiceSummary'
        nextPage:
          description: The URL to access the next page
          type: string
        pageCount:
          description: The page count
          type: number
        previousPage:
          description: The URL to access the previous page
          type: string
        totalItemsCount:
          description: The total number of items in the database
          type: number
    CancellationPolicy:
      description: The cancellation policy
      required:
        - policyText
        - cancellationDeadline
        - refundPercentage
      type: object
      properties:
        policyText:
          description: The cancellation policy text
          type: string
        cancellationDeadline:
          description: The numbers of days before the service date.
          type: number
        refundPercentage:
          description: The refund percentage
          type: integer
    ReviewList:
      description: ""
      required:
        - totalItemsCount
        - pageCount
        - data
        - nextPage
        - previousPage
      type: object
      properties:
        data:
          description: The list of items in current page
          type: array
          items:
            $ref: '#/components/schemas/Review'
        nextPage:
          description: The URL to access the next page
          type: string
        pageCount:
          description: The page count
          type: number
        previousPage:
          description: The URL to access the previous page
          type: string
        totalItemsCount:
          description: The total number of items in the database
          type: number
    ServiceProviderList:
      description: ""
      required:
        - totalItemsCount
        - pageCount
        - data
        - nextPage
        - previousPage
      type: object
      properties:
        data:
          description: The list of items in current page
          type: array
          items:
            $ref: '#/components/schemas/ServiceProviderSummary'
        nextPage:
          description: The URL to access the next page
          type: string
        pageCount:
          description: The page count
          type: number
        previousPage:
          description: The URL to access the previous page
          type: string
        totalItemsCount:
          description: The total number of items in the database
          type: number
    ServiceCategoryCreate:
      description: The new service category
      required:
        - name
      type: object
      properties:
        name:
          description: The service category name
          type: string
        parentId:
          description: The service category parent Id
          type: string
        description:
          description: The service category description
          type: string
    Address:
      description: ""
      required:
        - city
        - country
        - postalCode
        - state
        - street
      type: object
      properties:
        city:
          description: The city
          type: string
        country:
          description: The country
          type: string
        postalCode:
          description: The postal code
          type: string
        state:
          description: 'The state or province '
          type: string
        street:
          description: The street part of the address
          type: string
    TimeSlot:
      description: The time slot part of the service schedule
      required:
        - startTime
        - endTime
      type: object
      properties:
        startTime:
          description: The start time
          type: string
        endTime:
          description: 'The end time '
          type: string
    DaySchedule:
      description: 'The day schedule '
      required:
        - dayOfWeek
        - timeSlots
        - isOpen
      type: object
      properties:
        dayOfWeek:
          description: The day of week
          enum:
            - mon
            - tue
            - wed
            - thu
            - fri
            - sat
            - sun
            - holiday
          type: string
        timeSlots:
          description: The day schedule time slots
          type: array
          items:
            $ref: '#/components/schemas/TimeSlot'
        isOpen:
          description: Is the service open for the day
          type: boolean
    BufferTime:
      description: The service booking buffer time
      required:
        - before
        - after
      type: object
      properties:
        before:
          description: Before time before in minutes
          type: number
        after:
          description: The buffer time after in minutes
          type: number
    BookingWindow:
      description: The booking window for a service
      required:
        - max
        - min
      type: object
      properties:
        max:
          description: The max number of days before service in which it will be possible
            to book
          type: number
        min:
          description: The minimum number of days before service in which it will
            be possible to book
          type: number
    BookingType:
      description: ""
      enum:
        - oneTime
        - recurrent
      type: string
    Country:
      description: The country object
      required:
        - code
        - name
      type: object
      properties:
        code:
          description: The country code
          type: string
        name:
          description: The country name
          type: string
    State:
      description: The state object
      required:
        - code
        - name
      type: object
      properties:
        code:
          description: The state code
          type: string
        name:
          description: The state name
          type: string
    City:
      description: The City Object
      required:
        - code
        - name
      type: object
      properties:
        code:
          description: The city code
          type: string
        name:
          description: The city name
          type: string
    ServiceCreate:
      description: ""
      required:
        - durationType
        - serviceProviderId
        - serviceTemplateId
        - serviceProviderId
        - baseDuration
        - basePrice
        - bookingTypes
        - bookingWindow
        - bufferTime
        - serviceCategoryId
        - name
        - schedule
      type: object
      properties:
        schedule:
          description: The service weekly schedule
          type: array
          items:
            $ref: '#/components/schemas/DaySchedule'
        bufferTime:
          $ref: '#/components/schemas/BufferTime'
          description: The service buffer time
        bookingWindow:
          $ref: '#/components/schemas/BookingWindow'
          description: Specify how many days in the future do you accept bookings
        basePrice:
          format: float
          description: The service base price
          type: number
        baseDuration:
          description: The service base duration in minutes
          type: number
        bookingTypes:
          description: The supported booking types for this service
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/BookingType'
        name:
          description: The service name
          type: string
        description:
          description: The service description
          type: string
        serviceCategoryId:
          description: The service category id
          type: string
        serviceProviderId:
          description: The service provider id
          type: string
        amenities:
          description: The amenity ids
          type: array
          items:
            type: string
    ServiceStatus:
      description: The service status enumeration type
      enum:
        - online
        - offline
        - draft
        - moderation
        - ready
        - archived
      type: string
    ServiceOfferingCreate:
      description: The service offering object. Service offerings of type base should
        have no price (set to 0) and duration (set to 0). Service offerings of type
        add-on should have a price (greater than 0) and duration (greater than 0)
      required:
        - serviceId
        - type
        - duration
        - price
        - name
      type: object
      properties:
        serviceId:
          description: The service offering parent service id
          type: string
        type:
          $ref: '#/components/schemas/ServiceOfferingType'
          description: The service offering type
        duration:
          description: The service offering duration in minutes
          type: number
        price:
          format: float
          description: 'The service offering price '
          type: number
        name:
          description: The service offering name
          type: string
        description:
          description: The service offering description
          type: string
    ServiceOfferingType:
      description: The service offering type
      enum:
        - base
        - addOn
      type: string
    LicenceRequirementList:
      description: ""
      required:
        - totalItemsCount
        - pageCount
        - data
        - nextPage
        - previousPage
      type: object
      properties:
        data:
          description: The list of items in current page
          type: array
          items:
            $ref: '#/components/schemas/LicenceRequirement'
        nextPage:
          description: The URL to access the next page
          type: string
        pageCount:
          description: The page count
          type: number
        previousPage:
          description: The URL to access the previous page
          type: string
        totalItemsCount:
          description: The total number of items in the database
          type: number
    LicenceTypeCreate:
      description: The licence type object
      required:
        - name
      type: object
      properties:
        name:
          description: The licence type name
          type: string
    LicenceTypeList:
      description: ""
      required:
        - totalItemsCount
        - pageCount
        - data
        - nextPage
        - previousPage
      type: object
      properties:
        data:
          description: The list of items in current page
          type: array
          items:
            $ref: '#/components/schemas/LicenceType'
        nextPage:
          description: The URL to access the next page
          type: string
        pageCount:
          description: The page count
          type: number
        previousPage:
          description: The URL to access the previous page
          type: string
        totalItemsCount:
          description: The total number of items in the database
          type: number
    LicenceIssuerList:
      description: ""
      required:
        - totalItemsCount
        - pageCount
        - data
        - nextPage
        - previousPage
      type: object
      properties:
        data:
          description: The list of items in current page
          type: array
          items:
            $ref: '#/components/schemas/LicenceIssuer'
        nextPage:
          description: The URL to access the next page
          type: string
        pageCount:
          description: The page count
          type: number
        previousPage:
          description: The URL to access the previous page
          type: string
        totalItemsCount:
          description: The total number of items in the database
          type: number
    LicenceStatus:
      description: ""
      enum:
        - draft
        - new
        - accepted
        - rejected
        - expired
        - revoked
      type: string
    LicenceList:
      description: ""
      required:
        - totalItemsCount
        - pageCount
        - data
        - nextPage
        - previousPage
      type: object
      properties:
        data:
          description: The list of items in current page
          type: array
          items:
            $ref: '#/components/schemas/Licence'
        nextPage:
          description: The URL to access the next page
          type: string
        pageCount:
          description: The page count
          type: number
        previousPage:
          description: The URL to access the previous page
          type: string
        totalItemsCount:
          description: The total number of items in the database
          type: number
    Media:
      description: The file data type
      required:
        - id
        - url
        - mimeType
      type: object
      properties:
        id:
          description: The file id
          type: string
        url:
          description: The media url
          type: string
        mimeType:
          description: The media mime type
          enum:
            - image/jpeg
            - image/png
            - application/pdf
          type: string
    ServiceProviderStatus:
      description: The service provider status
      enum:
        - active
        - inactive
        - archived
      type: string
    BlockedDateCreate:
      description: The dates blocked by a service provider
      required:
        - startDate
        - endDate
        - services
        - serviceProviderId
      type: object
      properties:
        startDate:
          format: date-time
          description: The start date
          type: string
        endDate:
          format: date-time
          description: The end date
          type: string
        services:
          description: The ids for services for which the blocked dates apply
          type: array
          items:
            type: string
        serviceProviderId:
          description: The service provider id
          type: string
    Amenity:
      description: A text block
      required:
        - name
        - icon
        - id
        - serviceCategoryId
      type: object
      properties:
        name:
          description: The amenity title
          type: string
        icon:
          description: The amenity icon
          type: string
        description:
          description: The amenity description
          type: string
        id:
          format: uuid
          description: The amenity id
          type: string
        serviceCategoryId:
          format: uuid
          description: The amenity service category id
          type: string
    AmenityCreate:
      description: A text block
      required:
        - name
        - icon
        - serviceCategoryId
      type: object
      properties:
        name:
          description: The amenity title
          type: string
        icon:
          description: The amenity icon
          type: string
        description:
          description: The amenity description
          type: string
        serviceCategoryId:
          format: uuid
          description: The amenity service category id
          type: string
    AmenityPatch:
      description: A text block
      required:
        - id
      type: object
      properties:
        name:
          description: The amenity title
          type: string
        icon:
          description: The amenity icon
          type: string
        description:
          description: The amenity description
          type: string
        id:
          format: uuid
          description: The amenity id
          type: string
    BlockedDate:
      description: The dates blocked by a service provider
      required:
        - startDate
        - endDate
        - services
        - id
        - serviceProviderId
      type: object
      properties:
        startDate:
          format: date-time
          description: The start date
          type: string
        endDate:
          format: date-time
          description: The end date
          type: string
        services:
          description: The ids for services for which the blocked dates apply
          type: array
          items:
            type: string
        id:
          format: uuid
          description: The blocked date id
          type: string
        serviceProviderId:
          format: uuid
          description: The service provider id
          type: string
    BlockedDatePatch:
      description: The dates blocked by a service provider
      required:
        - id
        - serviceProviderId
      type: object
      properties:
        startDate:
          format: date-time
          description: The start date
          type: string
        endDate:
          format: date-time
          description: The end date
          type: string
        services:
          description: The ids for services for which the blocked dates apply
          type: array
          items:
            type: string
        id:
          format: uuid
          description: The blocked date id
          type: string
        serviceProviderId:
          format: uuid
          description: The service provider id
          type: string
    Licence:
      description: The service licence
      required:
        - id
        - licenceRequirement
        - serviceProviderId
        - licenceNumber
        - status
        - validUntil
        - licenceIssuer
      type: object
      properties:
        id:
          format: uuid
          description: The service licence id
          type: string
        licenceNumber:
          description: The licence number
          type: string
        status:
          $ref: '#/components/schemas/LicenceStatus'
          description: The licence status e.g. revoked or valid
        validUntil:
          format: date
          description: The date at which the licence will no longer be valid
          type: string
        serviceProviderId:
          format: uuid
          description: The service provider id
          type: string
        licenceRequirement:
          $ref: '#/components/schemas/LicenceRequirement'
          description: The licence requirement id
        licenceIssuer:
          $ref: '#/components/schemas/LicenceIssuer'
          description: The licence issuer
        document:
          $ref: '#/components/schemas/Media'
          description: The licence document
    LicenceIssuer:
      description: Carries license type information
      required:
        - id
        - issuerName
        - issuingState
        - issuingCountry
        - licenceType
      type: object
      properties:
        id:
          format: uuid
          description: The licence issuer id
          type: string
        issuingState:
          $ref: '#/components/schemas/State'
          description: The licence issuing state
        issuingCountry:
          $ref: '#/components/schemas/Country'
          description: The issuing Country
        issuerName:
          description: The licence issuer e.g. Société de l'assurance automobile du
            Québec (SAAQ)
          type: string
        licenceType:
          $ref: '#/components/schemas/LicenceType'
          description: The licence type this issuer can issue
    LicencePatch:
      description: The service licence
      required:
        - id
      type: object
      properties:
        licenceNumber:
          description: The licence number
          type: string
        status:
          $ref: '#/components/schemas/LicenceStatus'
          description: The licence status e.g. revoked or valid
        validUntil:
          format: date
          description: The date at which the licence will no longer be valid
          type: string
        serviceProviderId:
          format: uuid
          description: The service provider id
          type: string
        licenceRequirementId:
          format: uuid
          description: The licence requirement id
          type: string
        licenceIssuerId:
          format: uuid
          description: The licence issuer id
          type: string
        id:
          format: uuid
          description: The licence id
          type: string
    LicenceRequirement:
      description: The service category licence requirements
      required:
        - id
        - serviceCategory
        - licenceIssuers
        - state
        - country
        - licenceType
        - startDate
        - status
      type: object
      properties:
        id:
          format: uuid
          description: The licence requirement id
          type: string
        state:
          $ref: '#/components/schemas/State'
          description: The requiring state
        country:
          $ref: '#/components/schemas/Country'
          description: The requiring country
        licenceIssuers:
          description: The accepted licence issuers
          type: array
          items:
            $ref: '#/components/schemas/LicenceIssuer'
        licenceType:
          $ref: '#/components/schemas/LicenceType'
          description: The licence type required for this service category
        serviceCategory:
          $ref: '#/components/schemas/ServiceCategory'
          description: 'The service category '
        startDate:
          format: date-time
          description: The requirement start date
          type: string
        endDate:
          format: date-time
          description: The requirement end date
          type: string
        status:
          $ref: '#/components/schemas/LicenceRequirementStatus'
          description: The licence requirement status
    LicenceType:
      description: The licence type object
      required:
        - id
        - name
      type: object
      properties:
        id:
          format: uuid
          description: The licence type id
          type: string
        name:
          description: The licence type name
          type: string
    LicenceTypePatch:
      description: The licence type object
      required:
        - id
        - name
      type: object
      properties:
        id:
          format: uuid
          description: The licence type id
          type: string
        name:
          description: The licence type name
          type: string
    Reviewer:
      description: The service reviewer object
      required:
        - id
        - name
      type: object
      properties:
        id:
          format: uuid
          description: The reviewer id
          type: string
        name:
          description: The reviewer name
          type: string
        location:
          description: The reviewer location
          type: string
        avatar:
          $ref: '#/components/schemas/Media'
          description: The reviewer avatar
    Service:
      description: ""
      required:
        - id
        - provider
        - geohash
        - weekSchedule
        - bufferTime
        - bookingWindow
        - basePrice
        - baseDuration
        - status
        - serviceOfferings
        - bookingTypes
        - name
        - serviceCategory
        - licenceRequirements
        - rating
        - reviewCount
        - slug
        - launchDate
        - lastUpdated
      type: object
      properties:
        id:
          format: uuid
          description: The service id
          type: string
        rating:
          format: float
          description: The service rating
          type: number
        reviewCount:
          description: The service review count
          type: number
        bufferTime:
          $ref: '#/components/schemas/BufferTime'
          description: The service buffer time
        bookingWindow:
          $ref: '#/components/schemas/BookingWindow'
          description: Specify how many days in the future do you accept bookings
        status:
          $ref: '#/components/schemas/ServiceStatus'
          description: The service status
        basePrice:
          format: float
          description: The service base price
          type: number
        baseDuration:
          description: The service base duration in minutes
          type: number
        bookingTypes:
          description: The supported booking types for this service
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/BookingType'
        name:
          description: The service name
          type: string
        description:
          description: The service description
          type: string
        provider:
          $ref: '#/components/schemas/ServiceProvider'
          description: The service provider
        licences:
          description: The licences the service provider holds to be able to offer
            these services
          type: array
          items:
            $ref: '#/components/schemas/Licence'
        licenceRequirements:
          description: The licence requirements to be able to offer this service
          type: array
          items:
            $ref: '#/components/schemas/LicenceRequirement'
        serviceOfferings:
          description: The service offerings
          type: array
          items:
            $ref: '#/components/schemas/ServiceOffering'
        serviceCategory:
          $ref: '#/components/schemas/ServiceCategory'
          description: The service category
        weekSchedule:
          description: The service week schedule
          type: array
          items:
            $ref: '#/components/schemas/DaySchedule'
        gallery:
          description: The service image gallery
          type: array
          items:
            $ref: '#/components/schemas/Media'
        slug:
          description: The service slug
          type: string
        amenities:
          description: The service amenities
          type: array
          items:
            $ref: '#/components/schemas/Amenity'
        launchDate:
          format: date-time
          description: The service launch date
          type: string
        lastUpdated:
          format: date-time
          description: The date at which the service was last updated
          type: string
    ServiceCategory:
      description: ""
      required:
        - name
        - id
        - slug
      type: object
      properties:
        id:
          format: uuid
          description: The service category id
          type: string
        name:
          description: The service category name
          type: string
        parentId:
          format: uuid
          description: The service category parent Id
          type: string
        description:
          description: The service category description
          type: string
        avatar:
          $ref: '#/components/schemas/Media'
          description: The category avatar
        slug:
          description: The service category slug
          type: string
    ServiceCategoryPatch:
      description: ""
      required:
        - id
      type: object
      properties:
        id:
          format: uuid
          description: The service category id
          type: string
        name:
          description: The service category name
          type: string
        parentId:
          format: uuid
          description: The service category parent Id
          type: string
        description:
          description: The service category description
          type: string
    ServiceOffering:
      description: The service offering object. Service offerings of type base should
        have no price (set to 0) and duration (set to 0). Service offerings of type
        add-on should have a price (greater than 0) and duration (greater than 0)
      required:
        - id
        - serviceId
        - type
        - duration
        - price
        - name
      type: object
      properties:
        id:
          format: uuid
          description: The service offering id
          type: string
        serviceId:
          format: uuid
          description: The service offering parent service id
          type: string
        type:
          $ref: '#/components/schemas/ServiceOfferingType'
          description: The service offering type
        duration:
          description: The service offering duration in minutes
          type: number
        price:
          format: float
          description: 'The service offering price '
          type: number
        name:
          description: The service offering name
          type: string
        description:
          description: The service offering description
          type: string
    ServiceOfferingPatch:
      description: The service offering object. Service offerings of type base should
        have no price (set to 0) and duration (set to 0). Service offerings of type
        add-on should have a price (greater than 0) and duration (greater than 0)
      required:
        - id
        - serviceId
        - type
        - duration
        - price
        - name
      type: object
      properties:
        id:
          format: uuid
          description: The service offering id
          type: string
        serviceId:
          format: uuid
          description: The service offering parent service id
          type: string
        type:
          $ref: '#/components/schemas/ServiceOfferingType'
          description: The service offering type
        duration:
          description: The service offering duration in minutes
          type: number
        price:
          format: float
          description: 'The service offering price '
          type: number
        name:
          description: The service offering name
          type: string
        description:
          description: The service offering description
          type: string
    ServiceProvider:
      description: The service provider object
      required:
        - id
        - geohash
        - blockedDates
        - status
        - country
        - state
        - city
        - slug
        - reviewCount
        - lastActivity
        - firstActivity
      type: object
      properties:
        id:
          format: uuid
          description: 'The service provider user id '
          type: string
        reviewCount:
          description: The service provider review count
          type: number
        badge:
          description: The service provider badge
          type: string
        bio:
          description: The service provider bio
          type: string
        languages:
          description: The service provider languages
          type: array
          items:
            type: string
        rating:
          format: float
          description: The service provider rating
          type: number
        geohash:
          description: The service provider geohash
          type: string
        firstName:
          description: The service provider name
          type: string
        lastName:
          description: The service provider last name
          type: string
        email:
          description: The service provider email address
          type: string
        phoneNumber:
          description: The service provider phone number
          type: string
        address:
          $ref: '#/components/schemas/Address'
          description: The service provider address
        blockedDates:
          description: The provider blocked dates
          type: array
          items:
            $ref: '#/components/schemas/BlockedDate'
        status:
          $ref: '#/components/schemas/ServiceProviderStatus'
          description: Specifies the service provider status
        country:
          $ref: '#/components/schemas/Country'
          description: The service provider country
        state:
          $ref: '#/components/schemas/State'
          description: The service provider state
        city:
          $ref: '#/components/schemas/City'
          description: The service provider city
        avatar:
          $ref: '#/components/schemas/Media'
          description: The service provider avatar
        slug:
          description: The service provider slug
          type: string
        responseRate:
          $ref: '#/components/schemas/ServiceProviderResponseRate'
          description: The service provider response rate
        lastActivity:
          format: date-time
          description: The service provider last activity
          type: string
        firstActivity:
          format: date-time
          description: The service provider first activity
          type: string
        certifications:
          description: The service provider certifications
          type: array
          items:
            $ref: '#/components/schemas/Certification'
    ServiceProviderPatch:
      description: The service provider object
      required:
        - id
      type: object
      properties:
        id:
          format: uuid
          description: 'The service provider user id '
          type: string
        bio:
          description: The service provider bio
          type: string
        status:
          $ref: '#/components/schemas/ServiceProviderStatus'
          description: Specifies the service provider status
        cityCode:
          description: The service provider city code
          type: string
        countryCode:
          description: The service provider country code
          type: string
        stateCode:
          description: The service provider state code
          type: string
    ServiceProviderSummary:
      description: The service provider object
      required:
        - id
        - slug
      type: object
      properties:
        id:
          format: uuid
          description: 'The service provider user id '
          type: string
        reviewCount:
          description: The service provider review count
          type: number
        badge:
          description: The service provider badge
          type: string
        bio:
          description: The service provider bio
          type: string
        rating:
          format: float
          description: The service provider rating
          type: number
        geohash:
          description: The service provider geohash
          type: string
        firstName:
          description: The service provider name
          type: string
        lastName:
          description: The service provider last name
          type: string
        status:
          description: Specifies the service provider status
          enum:
            - active
            - inactive
          type: string
        country:
          $ref: '#/components/schemas/Country'
          description: The service provider country
        state:
          $ref: '#/components/schemas/State'
          description: The service provider state
        city:
          $ref: '#/components/schemas/City'
          description: The service provider city
        avatar:
          $ref: '#/components/schemas/Media'
          description: The service provider avatar
        slug:
          description: The service provider slug
          type: string
    ServiceSummary:
      description: ""
      required:
        - id
        - name
        - serviceCategory
        - provider
        - status
        - baseDuration
        - basePrice
        - bookingTypes
        - rating
        - reviewCount
        - slug
      type: object
      properties:
        id:
          format: uuid
          description: The service id
          type: string
        rating:
          format: float
          description: The service rating
          type: number
        reviewCount:
          description: The service review count
          type: number
        status:
          $ref: '#/components/schemas/ServiceStatus'
          description: The service status
        basePrice:
          format: float
          description: The service base price
          type: number
        baseDuration:
          description: The service base duration in minutes
          type: number
        bookingTypes:
          description: The supported booking types for this service
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/BookingType'
        name:
          description: The service name
          type: string
        description:
          description: The service description
          type: string
        provider:
          $ref: '#/components/schemas/ServiceProvider'
          description: The service provider
        serviceCategory:
          $ref: '#/components/schemas/ServiceCategory'
          description: The service category
        slug:
          description: The service slug
          type: string
    CertificationStatus:
      description: The certification status
      enum:
        - draft
        - complete
      type: string
    Certification:
      description: Carries the service category certification
      required:
        - id
        - serviceProviderId
        - certificateTitle
        - certificateHolder
        - dateIssued
        - issuer
        - status
      type: object
      properties:
        id:
          format: uuid
          description: The certification id
          type: string
        serviceProviderId:
          format: uuid
          description: The service provider id
          type: string
        certificateTitle:
          description: The certificate title
          type: string
        certificateHolder:
          description: The certificate holder
          type: string
        dateIssued:
          format: date
          description: The date in which the certificate was issued
          type: string
        issuer:
          description: 'The issuing authority '
          type: string
        document:
          $ref: '#/components/schemas/Media'
          description: 'The certification document '
        serviceCategoryIds:
          description: The service category ids for which this certification is relevant
          type: array
          items:
            format: uuid
            type: string
        status:
          $ref: '#/components/schemas/CertificationStatus'
          description: The certification status
    CertificationCreate:
      description: Carries the service category certification
      required:
        - serviceProviderId
        - certificateTitle
        - certificateHolder
        - dateIssued
        - issuer
      type: object
      properties:
        serviceProviderId:
          format: uuid
          description: The service provider id
          type: string
        certificateTitle:
          description: The certificate title
          type: string
        certificateHolder:
          description: The certificate holder
          type: string
        dateIssued:
          format: date
          description: The date in which the certificate was issued
          type: string
        issuer:
          description: 'The issuing authority '
          type: string
        serviceCategoryIds:
          description: The service category ids for which this certification is relevant
          type: array
          items:
            format: uuid
            type: string
    CertificationPatch:
      description: Carries the service category certification
      required:
        - id
      type: object
      properties:
        id:
          format: uuid
          description: The certification id
          type: string
        certificateTitle:
          description: The certificate title
          type: string
        certificateHolder:
          description: The certificate holder
          type: string
        dateIssued:
          format: date
          description: The date in which the certificate was issued
          type: string
        issuer:
          description: 'The issuing authority '
          type: string
        serviceCategoryIds:
          description: The service category ids for which this certification is relevant
          type: array
          items:
            format: uuid
            type: string
    CertificationList:
      description: ""
      required:
        - totalItemsCount
        - pageCount
        - data
        - nextPage
        - previousPage
      type: object
      properties:
        data:
          description: The list of items in current page
          type: array
          items:
            $ref: '#/components/schemas/Certification'
        nextPage:
          description: The URL to access the next page
          type: string
        pageCount:
          description: The page count
          type: number
        previousPage:
          description: The URL to access the previous page
          type: string
        totalItemsCount:
          description: The total number of items in the database
          type: number
    ServiceProviderResponseRate:
      description: The service provider response rate
      enum:
        - unknown
        - anHour
        - aFewHours
        - aDay
        - aFewDays
      type: string
    DocumentType:
      description: The document type object
      required:
        - id
        - name
        - issuingCountry
        - issuingState
      type: object
      properties:
        id:
          format: uuid
          description: The document type id
          type: string
        name:
          description: "The document type name e.g. Canadian Birth Certificate, Canadian\
            \ Passport"
          type: string
        issuingCountry:
          $ref: '#/components/schemas/Country'
          description: 'The issuing country '
        issuingState:
          $ref: '#/components/schemas/State'
          description: The issuing state
    Document:
      description: 'The document '
      required:
        - id
        - serviceProviderId
        - documentRequirement
        - documentType
        - document
        - status
      type: object
      properties:
        id:
          format: uuid
          description: The document id
          type: string
        serviceProviderId:
          format: uuid
          description: The service provider id
          type: string
        documentRequirement:
          $ref: '#/components/schemas/DocumentRequirement'
          description: The document requirement
        documentType:
          $ref: '#/components/schemas/DocumentType'
          description: The document type
        document:
          $ref: '#/components/schemas/Media'
          description: The document
        status:
          $ref: '#/components/schemas/DocumentStatus'
          description: The document status
    DocumentStatus:
      description: The document status
      enum:
        - new
        - accepted
        - rejected
      type: string
    DocumentCreate:
      description: 'The document '
      required:
        - serviceProviderId
        - documentRequirementId
        - documentTypeId
        - status
      type: object
      properties:
        serviceProviderId:
          format: uuid
          description: The service provider id
          type: string
        status:
          $ref: '#/components/schemas/DocumentStatus'
          description: The document status
        documentRequirementId:
          description: The document requirement id
          type: string
        documentTypeId:
          description: The document type id
          type: string
    DocumentPatch:
      description: 'The document '
      required:
        - id
      type: object
      properties:
        id:
          format: uuid
          description: The document id
          type: string
        serviceProviderId:
          format: uuid
          description: The service provider id
          type: string
        status:
          $ref: '#/components/schemas/DocumentStatus'
          description: The document status
        documentRequirementId:
          description: The document requirement id
          type: string
        documentTypeId:
          description: The document type id
          type: string
    DocumentList:
      description: ""
      required:
        - totalItemsCount
        - pageCount
        - data
        - nextPage
        - previousPage
      type: object
      properties:
        data:
          description: The list of items in current page
          type: array
          items:
            $ref: '#/components/schemas/Document'
        nextPage:
          description: The URL to access the next page
          type: string
        pageCount:
          description: The page count
          type: number
        previousPage:
          description: The URL to access the previous page
          type: string
        totalItemsCount:
          description: The total number of items in the database
          type: number
    DocumentTypeCreate:
      description: The document type object
      required:
        - name
        - issuingCountryCode
        - issuingStateCode
      type: object
      properties:
        name:
          description: "The document type name e.g. Canadian Birth Certificate, Canadian\
            \ Passport"
          type: string
        issuingCountryCode:
          description: The issuing country code
          type: string
        issuingStateCode:
          description: The issuing state code
          type: string
    DocumentTypePatch:
      description: The document type object
      required:
        - id
      type: object
      properties:
        id:
          format: uuid
          description: The document type id
          type: string
        name:
          description: "The document type name e.g. Canadian Birth Certificate, Canadian\
            \ Passport"
          type: string
        issuingCountryCode:
          description: The issuing country code
          type: string
        issuingStateCode:
          description: The issuing state code
          type: string
    DocumentTypeList:
      description: ""
      required:
        - totalItemsCount
        - pageCount
        - data
        - nextPage
        - previousPage
      type: object
      properties:
        data:
          description: The list of items in current page
          type: array
          items:
            $ref: '#/components/schemas/DocumentType'
        nextPage:
          description: The URL to access the next page
          type: string
        pageCount:
          description: The page count
          type: number
        previousPage:
          description: The URL to access the previous page
          type: string
        totalItemsCount:
          description: The total number of items in the database
          type: number
    DocumentRequirementStatus:
      description: ""
      enum:
        - enabled
        - disabled
      type: string
    LicenceRequirementStatus:
      description: ""
      enum:
        - enabled
        - disabled
      type: string
    LicenceRequirementPatch:
      description: The service category licence requirements
      required:
        - id
      type: object
      properties:
        id:
          format: uuid
          description: The licence requirement id
          type: string
        serviceCategoryId:
          format: uuid
          description: The service category id
          type: string
        countryCode:
          description: The requiring country code
          type: string
        licenceIssuerIds:
          description: The accepted licence issuer ids
          type: array
          items:
            format: uuid
            type: string
        licenceTypeId:
          format: uuid
          description: The licence type id
          type: string
        stateCode:
          description: The requiring state
          type: string
        startDate:
          format: date-time
          description: The requirement start date
          type: string
        endDate:
          format: date-time
          description: The requirement end date
          type: string
        status:
          $ref: '#/components/schemas/LicenceRequirementStatus'
          description: The licence requirement status
    DocumentRequirementList:
      description: ""
      required:
        - totalItemsCount
        - pageCount
        - data
        - nextPage
        - previousPage
      type: object
      properties:
        data:
          description: The list of items in current page
          type: array
          items:
            $ref: '#/components/schemas/DocumentRequirement'
        nextPage:
          description: The URL to access the next page
          type: string
        pageCount:
          description: The page count
          type: number
        previousPage:
          description: The URL to access the previous page
          type: string
        totalItemsCount:
          description: The total number of items in the database
          type: number
    LicenceCreate:
      description: The service licence
      required:
        - licenceRequirementId
        - serviceProviderId
        - licenceNumber
        - status
        - validUntil
        - licenceIssuerId
      type: object
      properties:
        licenceNumber:
          description: The licence number
          type: string
        status:
          $ref: '#/components/schemas/LicenceStatus'
          description: The licence status e.g. revoked or valid
        validUntil:
          format: date
          description: The date at which the licence will no longer be valid
          type: string
        serviceProviderId:
          format: uuid
          description: The service provider id
          type: string
        licenceRequirementId:
          format: uuid
          description: The licence requirement id
          type: string
        licenceIssuerId:
          format: uuid
          description: The licence issuer id
          type: string
    LicenceIssuerCreate:
      description: Carries license type information
      required:
        - issuerName
        - issuingStateCode
        - issuingCountryCode
        - licenceTypeId
      type: object
      properties:
        issuerName:
          description: The licence issuer e.g. Société de l'assurance automobile du
            Québec (SAAQ)
          type: string
        issuingCountryCode:
          description: The issuing Country
          type: string
        issuingStateCode:
          description: The licence issuing state
          type: string
        licenceTypeId:
          format: uuid
          description: The licence type this issuer can issue
          type: string
    LicenceIssuerPatch:
      description: Carries license type information
      required:
        - id
      type: object
      properties:
        id:
          format: uuid
          description: The licence issuer id
          type: string
        issuerName:
          description: The licence issuer e.g. Société de l'assurance automobile du
            Québec (SAAQ)
          type: string
        issuingCountryCode:
          description: The issuing Country
          type: string
        issuingStateCode:
          description: The licence issuing state
          type: string
        licenceTypeId:
          format: uuid
          description: The licence type this issuer can issue
          type: string
    LicenceRequirementCreate:
      description: The service category licence requirements
      required:
        - serviceCategoryId
        - licenceIssuerIds
        - stateCode
        - countryCode
        - licenceTypeId
        - startDate
      type: object
      properties:
        serviceCategoryId:
          format: uuid
          description: The service category id
          type: string
        countryCode:
          description: The requiring country code
          type: string
        licenceIssuerIds:
          description: The accepted licence issuer ids
          type: array
          items:
            format: uuid
            type: string
        licenceTypeId:
          format: uuid
          description: The licence type id
          type: string
        stateCode:
          description: The requiring state
          type: string
        startDate:
          format: date-time
          description: The requirement start date
          type: string
        endDate:
          format: date-time
          description: The requirement end date
          type: string
    DocumentRequirement:
      description: The document requirement as specified by countries or states
      required:
        - id
        - name
        - requiringCountry
        - requiringState
        - acceptedDocumentTypes
        - startDate
        - status
      type: object
      properties:
        id:
          format: uuid
          description: The document requirement id
          type: string
        name:
          description: The document requirement name
          type: string
        documentTypes:
          description: The accepted document types
          type: array
          items:
            $ref: '#/components/schemas/DocumentType'
        startDate:
          format: date-time
          description: The requirement start date
          type: string
        endDate:
          format: date-time
          description: The requirement end date
          type: string
        status:
          $ref: '#/components/schemas/DocumentRequirementStatus'
          description: The document requirement status
        requiringCountry:
          $ref: '#/components/schemas/Country'
          description: The requiring country code
        requiringState:
          $ref: '#/components/schemas/State'
          description: The requiring state code
    DocumentRequirementCreate:
      description: The document requirement as specified by countries or states
      required:
        - name
        - requiringCountryCode
        - requiringStateCode
        - acceptedDocumentTypeIds
        - startDate
        - status
      type: object
      properties:
        name:
          description: The document requirement name
          type: string
        requiringCountryCode:
          description: The requiring country code
          type: string
        requiringStateCode:
          description: The requiring state code
          type: string
        startDate:
          format: date-time
          description: The requirement start date
          type: string
        endDate:
          format: date-time
          description: The requirement end date
          type: string
        status:
          $ref: '#/components/schemas/DocumentRequirementStatus'
          description: The document requirement status
        documentTypeIds:
          description: The accepted document type ids
          type: array
          items:
            format: uuid
            type: string
    DocumentRequirementPatch:
      description: The document requirement as specified by countries or states
      required:
        - id
      type: object
      properties:
        id:
          format: uuid
          description: The document requirement id
          type: string
        name:
          description: The document requirement name
          type: string
        requiringCountryCode:
          description: The requiring country code
          type: string
        requiringStateCode:
          description: The requiring state code
          type: string
        startDate:
          format: date-time
          description: The requirement start date
          type: string
        endDate:
          format: date-time
          description: The requirement end date
          type: string
        status:
          $ref: '#/components/schemas/DocumentRequirementStatus'
          description: The document requirement status
        documentTypeIds:
          description: The accepted document type ids
          type: array
          items:
            format: uuid
            type: string
    Review:
      description: The service review
      required:
        - id
        - review
        - rating
        - reviewDate
        - reviewer
        - service
      type: object
      properties:
        id:
          format: uuid
          description: The review id
          type: string
        review:
          description: The review text
          type: string
        rating:
          format: float
          description: The review rating
          type: number
        reviewDate:
          format: date-time
          description: The review date
          type: string
        reviewer:
          $ref: '#/components/schemas/Reviewer'
          description: The service reviewer
        parentId:
          format: uuid
          description: The review parent id
          type: string
        service:
          $ref: '#/components/schemas/ServiceSummary'
          description: The service which has been rated
    ServicePatch:
      description: ""
      required:
        - id
      type: object
      properties:
        id:
          format: uuid
          description: The service id
          type: string
        bufferTime:
          $ref: '#/components/schemas/BufferTime'
          description: The service buffer time
        bookingWindow:
          $ref: '#/components/schemas/BookingWindow'
          description: Specify how many days in the future do you accept bookings
        basePrice:
          format: float
          description: The service base price
          type: number
        baseDuration:
          description: The service base duration in minutes
          type: number
        bookingTypes:
          description: The supported booking types for this service
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/BookingType'
        name:
          description: The service name
          type: string
        description:
          description: The service description
          type: string
        serviceCategoryId:
          format: uuid
          description: The service category id
          type: string
        serviceProviderId:
          format: uuid
          description: The service provider id
          type: string
        weekSchedule:
          description: The service weekly schedule
          type: array
          items:
            $ref: '#/components/schemas/DaySchedule'
        amenities:
          description: The amenity ids
          type: array
          items:
            format: uuid
            type: string
    ProblemDetail:
      description: ""
      required:
        - type
        - title
        - detail
        - instance
      type: object
      properties:
        detail:
          description: A human-readable explanation of the error
          type: string
        instance:
          description: A URI that identifies the specific occurrence of the error
          type: string
        status:
          description: The HTTP response code
          type: string
        title:
          description: "A brief, human-readable message about the error"
          type: string
        type:
          description: A URI identifier that categorizes the error
          type: string
        errors:
          description: Problem detail errors in case of validation errors
          type: object
          additionalProperties:
            type: array
            items:
              type: string
  responses:
    NotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'
      description: The resource was not found
    Unauthorized:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'
      description: User is not authenticated
    Forbidden:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'
      description: User is not allowed to perform action
    BadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'
      description: There was an error with the request
tags:
  - name: Licences
    description: The service licences endpoints
  - name: Service Categories
    description: The service category endpoints
  - name: Service Providers
    description: The service provider endpoints
  - name: Services
    description: The services endpoints
  - name: Documents
    description: The Document endpoints